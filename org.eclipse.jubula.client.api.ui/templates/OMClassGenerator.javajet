<%@ jet 
package="org.eclipse.jubula.toolkit.client.api.ui.internal" 
imports="java.util.*
			org.apache.commons.lang.StringUtils
			org.eclipse.jubula.client.api.ui.utils.OMAssociation
			org.eclipse.jubula.tools.internal.constants.StringConstants" 
class="OMClassGenerator"%>
<%
OMAssociation omAssociation = (OMAssociation) argument;
String className = StringUtils.substringBefore(
								omAssociation.getTargetClassName(), StringConstants.DOT);
%>

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

import org.eclipse.jubula.client.MakeR;
import org.eclipse.jubula.client.ObjectMapping;
import org.eclipse.jubula.tools.ComponentIdentifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class <%=className%> {
	/** the logger */
    private static Logger log = LoggerFactory.getLogger(<%=className%>.class);
    
    /** the input stream */
    private static InputStream stream;
    
    /** load input stream */
    static {
<%String encodedAssociations = omAssociation.getEncodedAssociations().toString().replace(StringConstants.NEWLINE, "\\n");%>
        String contentOfPropertyFile = "<%=encodedAssociations%>"; //$NON-NLS-1$
        try {
            stream = new ByteArrayInputStream(
                    contentOfPropertyFile.getBytes("ISO-8859-1")); //$NON-NLS-1$
        } catch (UnsupportedEncodingException e) {
            log.error(e.getLocalizedMessage(), e);
        }
    }
    
    /** the object mapping */
    private static ObjectMapping objectMapping = MakeR.createObjectMapping(stream);
    
<%
Map<String, String> map = omAssociation.getIdentifierMap();
for (String componentIdentifier : map.keySet()) {%>
    <%String javaQualifier = map.get(componentIdentifier);%>
    /** The component identifier for "<%=componentIdentifier%>"*/
    public static final ComponentIdentifier <%=javaQualifier%> = objectMapping.get("<%=componentIdentifier%>"); //$NON-NLS-1$
<%}%>
    
    private <%=className%>() {
        // private
    }
}
