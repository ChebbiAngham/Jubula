= Pre-requisites =

== general architecture ==
 * major part of the ITE are "single-sourced" meaning:
  * they may run in an RCP context
  * as well as in a RAP context
 * all single-sourced bundles with a UI / JFace dependency must get its dependency from
  * {{{org.eclipse.jubula.ui.compatibility}}}
   * this bundle holds **all** dependencies RAP and RCP
   * re-export all of them
   * and marks all as optional
  * **DO NOT remove** the p2.inf in any (META-INF) directory
   * marks the greediness / optional character of its these dependencies on build / aggregation time
   * also note the RCP over RAP preference in many POMs that make use of this compatibility / bridge bundle
   
 * the dashboard falls apart into 2 separate applications
  * the dashboard-server {{{org.eclipse.jubula.product.dashboard}}} which is the actual dashboard
  * and the dashboard (starter) which is only responsible to
   * start the dashboard
   * manage the system tray icon
   * wait until it's (un-)available
   * launch up the OS default browser and open the dashboard URL in it
   * it's like a wrapper / watch process for the dashboard to ease its handling


== Create an own workspace for RAP development ==
 * These bundles (fragments) should be imported to the new workspace:
{{{
		com.bredexsw.jubula.client.core.driver
		org.eclipse.jubula.product.dashboard
		org.eclipse.jubula.project.configuration
		org.eclipse.jubula.app.dashboard
		org.eclipse.jubula.client.core
		org.eclipse.jubula.client.ui
		org.eclipse.jubula.client.ui.rap
		org.eclipse.jubula.communication
		org.eclipse.jubula.dashboard.jettycustomizer
		org.eclipse.jubula.dashboard.starter
		org.eclipse.jubula.toolkit.common
		org.eclipse.jubula.tools
		org.eclipse.jubula.ui.compatibility
		org.eclipse.jubula.toolkit.provider.base
		org.eclipse.jubula.toolkit.provider.concrete
		org.eclipse.jubula.toolkit.provider.*
}}}
	* set the "dashboard-local" target as active target platform
	* set the Checkstyle
	* set the arguments of the dashboard launch configuration(dburl, user and password)
	* now you can launch the dashboard

== dashboard specific handler implementations ==
 * quite a lot of the ITE commands are implemented slightly differently when running in the RAP context
  * e.g. export test result details: instead of opening a file / directory chooser the user can only download the artifact (report)
 * some other implementations of handler and states assume / explicitly define contributions with exact the same ID as for the RCP ITE

== dashboard look and feel ==
 * extends "org.eclipse.rap.design.example.business.theme" of {{{org.eclipse.rap.design.example}}} - in {{{org.eclipse.jubula.app.dashboard/plugin.xml}}}
  * simply provides a different logo for the upper right corner

== dashboard in a tomcat ==
TODO

= Legacy =
 * dashboard does not yet hold dependency / include all toolkit provider
  * this might cause problems as soon as test results reports for this toolkit are shown / exported
 * we're still using a pretty old RAP version 1.5.2 < 2.x - we should update this
  * if don't update the (heavily JavaScript) based RAP engine might not work correctly on new browser versions
 * dashboard is pretty memory intensive due to caching of pseudo test results details see {{{GenerateTestResultTreeOperation}}} - maybe use a different (timing based) caching approach here
 * we don't actually use the dashboard - unknown status in larger multi user situations
 * unknown status of dashboard (product) aggregation during maven tycho build