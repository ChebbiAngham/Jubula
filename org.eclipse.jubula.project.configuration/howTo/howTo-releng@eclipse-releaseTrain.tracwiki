= Release-Engineering @eclipse.org =
== General information ==
We build on an hourly base triggered whenever necessary (by an SCM change) on http://hudson.eclipse.org using Maven3

 * [https://hudson.eclipse.org/jubula/job/jubula-nightly/ Jubula Hudson - nightly]
 * '''only ''' this job (e.g. no maintenance jobs) must publish its artifacts to "http://download.eclipse.org/jubula/development" - this p2-repository is used within our target-definitions of the ITE standalone version

In addition to this there are - for each individual release train version - the following targets available: 
 * [https://hudson.eclipse.org/jubula/job/jubula-helios/ Jubula Hudson - 3.6 - helios]
 * [https://hudson.eclipse.org/jubula/job/jubula-indigo/ Jubula Hudson - 3.7 - indigo]
 * [https://hudson.eclipse.org/jubula/job/jubula-juno/ Jubula Hudson - 4.2 - juno]
 * [https://hudson.eclipse.org/jubula/job/jubula-kepler/ Jubula Hudson - 4.3 - kepler]
 * [https://hudson.eclipse.org/jubula/job/jubula-luna/ Jubula Hudson - 4.4 - luna]
 * [https://hudson.eclipse.org/jubula/job/jubula-mars/ Jubula Hudson - 4.5 - mars]
 * [https://hudson.eclipse.org/jubula/job/jubula-neon/ Jubula Hudson - 4.6 - neon]

To get a new CI job simply "reopen" the following bug providing all necessary information: http://eclip.se/334525

The general aggregation process can be easily tracked here (e.g. job name = "<currentReleaseTrainName>.runAggregator"):
 * https://hudson.eclipse.org/hudson/view/Repository%20Aggregation/
 * EPP Testing Package Maintaining Enhancement Request[[BR]]http://eclip.se/344369

Signed artifacts can only be created within the  Eclipse common build infrastructure - its being activated (the maven profile) by a set environment option "'''-Dbuild.env=eclipse.org'''" for the mvn3 invoke of the CI job

== Useful commands / scripts ==
 * Download from Jubula's hudson instance
   * `wget "http://download.eclipse.org/jubula/nightly/org.eclipse.jubula.repo-3.1.0-SNAPSHOT.zip"`
 * Log into build.eclipse.org
   * `ssh <commiterId>@build.eclipse.org`
 * Log into dev.eclipse.org - only restricted-shell available
   * `ssh <commiterId>@dev.eclipse.org`
 * Upload files (bspw. p2-repositories) via SCP
   * `scp <pathToLocalFile> <commiterId>@build.eclipse.org:/home/data/users/<commiterID>/downloads/jubula/release/<name>/xyz.zip`

 * Copy CI-archived artifacts
   * cp /shared/jobs/<job-name>/lastSuccessful/archive/<path-to-artifact> /home/data/users/<commiterID>/downloads/jubula/release/<name>

== Eclipse Release Train / Aggregator ==
 * Useful information describing the ReleaseTrain can be found here
  * http://wiki.eclipse.org/Simrel/Contributing_to_Simrel_Aggregation_Build
 * Information about world accessible / downloadable files can be found here 
  * http://wiki.eclipse.org/IT_Infrastructure_Doc#Downloads
  
= Recipe for a release train M-X / RC-X participation =
 * download artifacts to publish from hudson.eclipse org (most of the time the jubula-nightly artifacts are taken) 
  * make sanity check e.g. 
   * validate checksums of file / test whether the ZIP is ok (unzip -t <filename>)
   * check contained Jubula features / bundles
   * check versions and timestamps of bundles
   * check inlined orbit dependencies
  * login to build.eclipse.org and prepare destination (**/jubula/(release|milestones)/<createNewDir>)
  * upload artifact via e.g. scp to newly create destination
  * login to build.eclipse.org and validate whether file has been transfered completly (e.g. again test the unzipping)
  * unzip it and check dir (775) and file (664) permissions of unzipped content
  * delete transferred ZIP file
  * alter jubula.b3aggrcon file in org.eclipse.simrel repository (use b3 Aggregator to validate changes)
  * commit (use meaningful commit message) and push change
  * monitor aggregation run to pick up new p2-repo location and content and check for errors during validation
  * wait for EPP builds and check for errors during package creation