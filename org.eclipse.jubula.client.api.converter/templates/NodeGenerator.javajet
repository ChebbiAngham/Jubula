<%@ jet 
package="org.eclipse.jubula.client.api.converter" 
imports="java.util.*
         org.apache.commons.lang.StringUtils
         org.eclipse.jubula.client.api.converter.exceptions.InvalidNodeNameException
         org.eclipse.jubula.client.api.converter.utils.CompNameLoader
         org.eclipse.jubula.client.api.converter.utils.ProjectCache
         org.eclipse.jubula.client.api.converter.utils.ParamUtils
         org.eclipse.jubula.client.api.converter.utils.Utils
         org.eclipse.jubula.client.core.model.ICapPO
         org.eclipse.jubula.client.core.model.IEventExecTestCasePO
         org.eclipse.jubula.client.core.model.IExecTestCasePO
         org.eclipse.jubula.client.core.model.INodePO
         org.eclipse.jubula.client.core.model.IParamDescriptionPO
         org.eclipse.jubula.client.core.model.IParameterInterfacePO
         org.eclipse.jubula.client.core.model.IProjectPO
         org.eclipse.jubula.client.core.model.IRefTestSuitePO
         org.eclipse.jubula.client.core.model.ISpecTestCasePO
         org.eclipse.jubula.client.core.model.ITestJobPO
         org.eclipse.jubula.client.core.model.ITestSuitePO
         org.eclipse.jubula.client.ui.rcp.Plugin
         org.eclipse.jubula.toolkit.api.gen.internal.utils.NameLoader
         org.eclipse.jubula.toolkit.common.businessprocess.ToolkitSupportBP
         org.eclipse.jubula.toolkit.common.xml.businessprocess.ComponentBuilder
         org.eclipse.jubula.tools.internal.constants.StringConstants
         org.eclipse.jubula.tools.internal.exception.JBException
         org.eclipse.jubula.tools.internal.xml.businessmodell.ConcreteComponent
         org.eclipse.jubula.tools.internal.xml.businessmodell.CompSystem
         org.eclipse.jubula.tools.internal.xml.businessmodell.Component
         org.eclipse.jubula.client.api.converter.annotations.NodeType
         org.slf4j.Logger
         org.slf4j.LoggerFactory"
class="NodeGenerator"%>
<%
Logger log = LoggerFactory.getLogger(NodeGenerator.class);

NodeInfo info = (NodeInfo)argument;
String className = info.getClassName();
INodePO node = info.getNode();
String uuid = node.getGuid();
String comment = node.getComment();
boolean hasComment = StringUtils.isNotBlank(comment);
String taskId = node.getTaskId();
boolean hasTaskId = StringUtils.isNotBlank(taskId);
Locale locale = info.getLanguage();
Iterator<INodePO> iterator = node.getNodeListIterator();
String packageBase = info.getPackageBasePath();
NameLoader nameLoader = NameLoader.getInstance();
IProjectPO project = null;
try {
    project = ProjectCache.get(node.getParentProjectId());
} catch (JBException e) {
    Plugin.getDefault().writeErrorLineToConsole(
                        "Error while loading project.", true);
   return StringConstants.EMPTY;
}
String projectName = null;
try {
    projectName = Utils.translateToPackageName(project);
} catch (InvalidNodeNameException e) {
    log.error(e.getLocalizedMessage());
}
String fqName = Utils.getFullyQualifiedTranslatedName(node, packageBase, projectName);
String packageName = StringUtils.substringBeforeLast(fqName, StringConstants.DOT);
String ctdsPath = Utils.getProjectPath(info.getPackageBasePath(), projectName);

NodeType type = NodeType.UNKNOWN;
if (node instanceof ISpecTestCasePO) {
    type = NodeType.TEST_CASE;
} else if (node instanceof ITestJobPO) {
    type = NodeType.TEST_JOB;
} else if (node instanceof ITestSuitePO) {
    type = NodeType.TEST_SUITE;
}

%>
package <%=packageName%>;

import org.eclipse.jubula.client.AUT;
import org.eclipse.jubula.client.api.converter.annotations.SrcNode;
import org.eclipse.jubula.client.api.converter.annotations.NodeType;

import <%=ctdsPath%>.CTDS;

@SrcNode(UUID = "<%=uuid%>",
         type = NodeType.<%=type%><%if (hasTaskId) {%>, taskId = "<%=taskId%>"<%}%>)
public class <%=className%> {
    
    <%if (hasComment) {%>/** <%=comment%> */<%}%>
    public static void execute(
    <%if (node instanceof ISpecTestCasePO) {
        ISpecTestCasePO tc = (ISpecTestCasePO) node;
        Iterator<IParamDescriptionPO> paramIterator = tc.getParameterListIter();
        while (paramIterator.hasNext()) {
            IParamDescriptionPO param = paramIterator.next();
            String paramType = nameLoader.findTypeForParameter(param.getType(), StringConstants.EMPTY);
            String paramName = param.getName();%>
        <%=paramType%> <%=paramName%><%if(paramIterator.hasNext()){%>,<%}%>
        <%}%>
    <%}%>
    ) {
        AUT aut = null;
        
        <%while (iterator.hasNext()) {
            INodePO child = iterator.next();
            boolean isActive = child.isActive();
            comment = child.getComment();
            hasComment = StringUtils.isNotBlank(comment);
        
        if (hasComment) {%>// <%=comment%><%}
            if (child instanceof ICapPO) {
                ICapPO cap = (ICapPO) child;
                String componentFromCap = cap.getComponentType();
                CompNameLoader loader = new CompNameLoader(componentFromCap);
                String actionName = loader.get(cap.getActionName());
                boolean hasDefaultMapping = loader.get("hasDefaultMapping").equals("true");
                String componentNameToCreate;
                String factoryName;
                ConcreteComponent cc = null;
                CompSystem compSystem = ComponentBuilder.getInstance().getCompSystem();
                Component c = compSystem.getComponentForType(componentFromCap);
                if (c instanceof ConcreteComponent) {
                    cc = (ConcreteComponent)c;            
                }
                if (hasDefaultMapping) {
                    String toolkitID = info.getDefaultToolkit();
                    factoryName = Utils.getFactoryName(toolkitID);
                  ConcreteComponent componentToCreate = ToolkitSupportBP.getMostAbstractRealizingComponentInToolkit(toolkitID, cc);
                    CompNameLoader newLoader = new CompNameLoader(componentToCreate.getType());
                    componentNameToCreate = newLoader.get("componentTypeName");
                } else {
                    factoryName = loader.get("factoryName");
                    componentNameToCreate = loader.get("componentTypeName");
                }
                if (actionName != null) {%>
        
        <%if (!isActive) {%>//<%}%>aut.execute(
            
            <%if (!isActive) {%>//<%}%><%=factoryName%>.create<%=componentNameToCreate%>(<%if (!hasDefaultMapping) {%>null<%}%>)
                
                <%if (!isActive) {%>//<%}%>.<%=actionName%>(
                <%Iterator<IParamDescriptionPO> childParamIterator = cap.getParameterListIter();
                while (childParamIterator.hasNext()) {
                    IParamDescriptionPO param = childParamIterator.next();
                    String paramType = param.getUniqueId();
                    String enumType = nameLoader.getEnumForParam(paramType);
                    String paramValue = ParamUtils.getValueForParam(cap, param, 0, locale);
                    Boolean isEnum = enumType != null;
                    String enumLookupMethodName = isEnum && (!enumType.endsWith(".Operator")) ? "valueOf": "literalAsEnum";%>
                    
                <%if (!isActive) {%>//<%}%><%if (isEnum) {%><%=enumType%>.<%=enumLookupMethodName%>(<%}%><%=paramValue%><%if (isEnum) {%>)<%}%>
                    
                <%if(childParamIterator.hasNext()){%><%if (!isActive) {%>//<%}%>,<%}%>
                <%}
                if (!isActive) {%>//<%}%>),
            
            <%if (!isActive) {%>//<%}%>null);
            
                <%} else {%>
        
        // TODO: Client action <%=cap.getActionName()%>.

                <%}%>
            <%} else if (child instanceof IExecTestCasePO) {
                IExecTestCasePO exec = (IExecTestCasePO)child;
                ISpecTestCasePO spec = exec.getSpecTestCase();
                for (IEventExecTestCasePO eventTC : spec.getAllEventEventExecTC()) {
                    String type = eventTC.getEventType();
                    String reentryProp = eventTC.getReentryProp().toString();
                    String eventHandlerName = StringConstants.EMPTY;
                    ISpecTestCasePO specEventHandler = eventTC.getSpecTestCase();
                    try {
                        project = ProjectCache.get(specEventHandler.getParentProjectId());
                    } catch (JBException e) {
                        Plugin.getDefault().writeErrorLineToConsole(
                                            "Error while loading project.", true);
                    }
                    try {
                        projectName = Utils.translateToPackageName(project);
                    } catch (InvalidNodeNameException e) {
                        log.error(e.getLocalizedMessage());
                    }
                    eventHandlerName = Utils.getFullyQualifiedTranslatedName(specEventHandler, packageBase, projectName);
                    Iterator<IParamDescriptionPO> childParamIterator;
                    IParameterInterfacePO dataCube = eventTC.getReferencedDataCube();%>
        // TODO: The following test case used an Event Handler which you have to replace manually:
        //       Type: <%=type%>
        //       Re-Entry Property: <%=reentryProp%>
        //       Used Test Case:
                    <%if (dataCube == null) {
                      int rowCount = eventTC.getDataManager().getDataSetCount();
                      int row = 0;
                      do {%>
        //            <%=eventHandlerName%>.execute(
                          <%childParamIterator = eventTC.getParameterListIter();
                          while (childParamIterator.hasNext()) {
                              IParamDescriptionPO param = childParamIterator.next();
                              String paramValue = ParamUtils.getValueForParam(eventTC, param, row, locale);%>
        //                <%=paramValue%><%if(childParamIterator.hasNext()){%>,<%}%>
                          <%}%>
                          <%row++;%>
        //            );
                      <%} while(row < rowCount);
                    }
                }
                String testCaseName = StringConstants.EMPTY;
                try {
                    project = ProjectCache.get(spec.getParentProjectId());
                } catch (JBException e) {
                    Plugin.getDefault().writeErrorLineToConsole(
                                        "Error while loading project.", true);
                   return StringConstants.EMPTY;
                }
                try {
                    projectName = Utils.translateToPackageName(project);
                } catch (InvalidNodeNameException e) {
                    log.error(e.getLocalizedMessage());
                }
                testCaseName = Utils.getFullyQualifiedTranslatedName(spec, packageBase, projectName);
                Iterator<IParamDescriptionPO> childParamIterator;
                IParameterInterfacePO dataCube = exec.getReferencedDataCube();
              if (dataCube == null) {
                int rowCount = exec.getDataManager().getDataSetCount();
                int row = 0;
                do {%>
        
        <%if (!isActive) {%>//<%}%><%=testCaseName%>.execute(
                    <%childParamIterator = exec.getParameterListIter();
                    while (childParamIterator.hasNext()) {
                        IParamDescriptionPO param = childParamIterator.next();
                        String paramValue = ParamUtils.getValueForParam(exec, param, row, locale);%>
            
            <%if (!isActive) {%>//<%}%><%=paramValue%><%if(childParamIterator.hasNext()){%>
            
            <%if (!isActive) {%>//<%}%>,<%}%>
                    <%}%>
                    <%row++;%>
        
        <%if (!isActive) {%>//<%}%>);
                <%} while(row < rowCount);
              } else {
                String dataCubeName = null;
                try {
                    dataCubeName = Utils.determineClassName(dataCube);
                } catch (InvalidNodeNameException e) {
                    log.error("Invalid Data Set Name", e);
                }%>
        for (CTDS.<%=dataCubeName%> row : CTDS.<%=dataCubeName%>.data) {
            
            <%if (!isActive) {%>//<%}%><%=testCaseName%>.execute(
                
                    <%childParamIterator = exec.getParameterListIter();
                    while (childParamIterator.hasNext()) {
                        IParamDescriptionPO param = childParamIterator.next();
                
                if (!isActive) {%>//<%}%>row.<%=param.getName()%><%if(childParamIterator.hasNext()){%>,<%}%>
                
                    <%}%>
                <%if (!isActive) {%>//<%}%>);
        }
              <%}%>
        
            <%} else if (child instanceof IRefTestSuitePO) {
                IRefTestSuitePO ref = (IRefTestSuitePO)child;
                ITestSuitePO testSuite = ref.getTestSuite();
                String testSuiteName = StringConstants.EMPTY;
                try {
                project = ProjectCache.get(testSuite.getParentProjectId());
                } catch (JBException e) {
                    Plugin.getDefault().writeErrorLineToConsole(
                                        "Error while loading project.", true);
                   return StringConstants.EMPTY;
                }
                try {
                    projectName = Utils.translateToPackageName(project);
                } catch (InvalidNodeNameException e) {
                    log.error(e.getLocalizedMessage());
                }
                testSuiteName = Utils.getFullyQualifiedTranslatedName(testSuite, packageBase, projectName);%>
        
        <%if (!isActive) {%>/* <%}%><%=testSuiteName%>.execute();<%if (!isActive) {%>*/<%}%>
        
            <%}%>
        <%}%>
    }
}