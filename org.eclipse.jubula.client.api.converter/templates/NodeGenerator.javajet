<%@ jet 
package="org.eclipse.jubula.client.api.converter" 
imports="java.util.*
         org.apache.commons.lang.StringUtils
         org.eclipse.jubula.client.api.converter.annotations.NodeType
         org.eclipse.jubula.client.api.converter.exceptions.InvalidNodeNameException
         org.eclipse.jubula.client.api.converter.utils.CompNameLoader
         org.eclipse.jubula.client.api.converter.utils.ParamUtils
         org.eclipse.jubula.client.api.converter.utils.Utils
         org.eclipse.jubula.client.core.businessprocess.CompNamesBP
         org.eclipse.jubula.client.core.businessprocess.ComponentNamesBP
         org.eclipse.jubula.client.core.model.ICapPO
         org.eclipse.jubula.client.core.model.ICompNamesPairPO
         org.eclipse.jubula.client.core.model.IEventExecTestCasePO
         org.eclipse.jubula.client.core.model.IExecTestCasePO
         org.eclipse.jubula.client.core.model.INodePO
         org.eclipse.jubula.client.core.model.IParamDescriptionPO
         org.eclipse.jubula.client.core.model.IParameterInterfacePO
         org.eclipse.jubula.client.core.model.IRefTestSuitePO
         org.eclipse.jubula.client.core.model.ISpecTestCasePO
         org.eclipse.jubula.client.core.model.ITestJobPO
         org.eclipse.jubula.client.core.model.ITestSuitePO
         org.eclipse.jubula.client.core.model.NodeMaker
         org.eclipse.jubula.client.core.model.ReentryProperty
         org.eclipse.jubula.client.ui.rcp.Plugin
         org.eclipse.jubula.toolkit.api.gen.internal.utils.NameLoader
         org.eclipse.jubula.toolkit.common.businessprocess.ToolkitSupportBP
         org.eclipse.jubula.toolkit.common.xml.businessprocess.ComponentBuilder
         org.eclipse.jubula.tools.internal.constants.StringConstants
         org.eclipse.jubula.tools.internal.exception.InvalidDataException
         org.eclipse.jubula.tools.internal.objects.event.TestErrorEvent
         org.eclipse.jubula.tools.internal.xml.businessmodell.ConcreteComponent
         org.eclipse.jubula.tools.internal.xml.businessmodell.CompSystem
         org.eclipse.jubula.tools.internal.xml.businessmodell.Component
         org.slf4j.Logger
         org.slf4j.LoggerFactory"
class="NodeGenerator"%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Initialzising variables which will be used during entire conversion process
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
Logger log = LoggerFactory.getLogger(NodeGenerator.class);
Map<String, NodeInfo> uuidToNodeInfoMap = NodeInfo.getUuidToNodeInfoMap();
NodeInfo info = (NodeInfo)argument;
String className = info.getClassName();
INodePO node = info.getNode();
String uuid = node.getGuid();
String comment = node.getComment();
boolean hasComment = StringUtils.isNotBlank(comment);
String taskId = node.getTaskId();
boolean hasTaskId = StringUtils.isNotBlank(taskId);
Iterator<INodePO> childIterator = node.getNodeListIterator();
String packageBase = info.getPackageBasePath();
NameLoader nameLoader = NameLoader.getInstance();
ComponentNamesBP componentNamesBP = ComponentNamesBP.getInstance();
CompNamesBP compNamesBP = new CompNamesBP();
List<String> compIdentifierNames = new ArrayList<String>();
boolean definesLocalCheckFailedHandling = false;
boolean definesLocalActionErrorHandling = false;
boolean definesLocalCompNotFoundHandling = false;
boolean definesLocalConfigurationErrorHandling = false;
boolean definesLocalEventHandling = false;
String fqName = info.getFqName();
String packageName = info.getPackageName();
String ctdsPath = Utils.getProjectPath(info.getPackageBasePath(), info.getProjectName());

NodeType nodeType = NodeType.UNKNOWN;
if (node instanceof ISpecTestCasePO) {
    nodeType = NodeType.TEST_CASE;
} else if (node instanceof ITestJobPO) {
    nodeType = NodeType.TEST_JOB;
} else if (node instanceof ITestSuitePO) {
    nodeType = NodeType.TEST_SUITE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Package declarartion
// Import statements
//     - going over children of the node and check whether they can be
//       imported without name conflicts
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
package <%=packageName%>;

import org.eclipse.jubula.client.AUT;
import org.eclipse.jubula.client.api.converter.annotations.SrcNode;
import org.eclipse.jubula.client.api.converter.annotations.NodeType;
import org.eclipse.jubula.client.exceptions.ActionException;
import org.eclipse.jubula.client.exceptions.CheckFailedException;
import org.eclipse.jubula.client.exceptions.ComponentNotFoundException;
import org.eclipse.jubula.client.exceptions.ConfigurationException;
import org.eclipse.jubula.qa.api.converter.target.rcp.RuntimeContext;
import org.eclipse.jubula.qa.api.converter.target.rcp.VariableStore;
import org.eclipse.jubula.toolkit.enums.ValueSets.*;
import org.eclipse.jubula.tools.ComponentIdentifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import <%=ctdsPath%>.CTDS;

<%childIterator = node.getNodeListIterator();
List<NodeInfo> classesToImport = new ArrayList<NodeInfo>();
List<NodeInfo> duplicateClasses = new ArrayList<NodeInfo>();
childInspection: while (childIterator.hasNext()) {
    INodePO child = childIterator.next();
    NodeInfo childInfo = null;
    if (child instanceof ICapPO) {
        continue;
    } else if (child instanceof IExecTestCasePO) {
        IExecTestCasePO exec = (IExecTestCasePO)child;
        ISpecTestCasePO spec = exec.getSpecTestCase();
        childInfo = uuidToNodeInfoMap.get(spec.getGuid());
    } else if (child instanceof IRefTestSuitePO) {
        IRefTestSuitePO ref = (IRefTestSuitePO)child;
        ITestSuitePO testSuite = ref.getTestSuite();
        childInfo = uuidToNodeInfoMap.get(testSuite.getGuid());
    }
    Utils.classifyImport(className, classesToImport, duplicateClasses, childInfo);
}
if (node instanceof ISpecTestCasePO) {
    ISpecTestCasePO tc = (ISpecTestCasePO) node;
    for (IEventExecTestCasePO eventTC : tc.getAllEventEventExecTC()) {
        String eventType = eventTC.getEventType();
        ReentryProperty reentryProp = eventTC.getReentryProp();
        if (reentryProp.equals(ReentryProperty.RETURN)) {
            NodeInfo childInfo = uuidToNodeInfoMap.get(eventTC.getSpecTestCase().getGuid());
            Utils.classifyImport(className, classesToImport, duplicateClasses, childInfo);
        }
    }
}
for (NodeInfo nodeInfo : classesToImport) {
    String fqChildName = nodeInfo.getFqName();%>
import <%=fqChildName%>;
<%}%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Start of class
//    - initializing members and constructor
//        - for test cases: runtime context and component identifiers are needed
//        - for test suites: AUT is needed and used to create runtime context
//        - for test jobs: nothing is needed
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>

@SrcNode(UUID = "<%=uuid%>",
         type = NodeType.<%=nodeType%><%if (hasTaskId) {%>, taskId = "<%=taskId%>"<%}%>)
public class <%=className%> {

    /** the logger */
    private static Logger log = LoggerFactory.getLogger(<%=className%>.class);
    
    <%if (node instanceof ISpecTestCasePO) {%>
    private RuntimeContext rtc;
        <%
        // Create list of component identifiers which are needed for constructing this test case.
        // This component identifiers will be members of this class.
        
        IExecTestCasePO fakeExec = NodeMaker.createExecTestCasePO((ISpecTestCasePO)node);
        List<ICompNamesPairPO> compNamePairs = compNamesBP.getAllCompNamesPairs(fakeExec);
        Iterator<ICompNamesPairPO> compNamePairsIterator = compNamePairs.iterator();
        while (compNamePairsIterator.hasNext()) {
            ICompNamesPairPO pair = compNamePairsIterator.next();
            String compIdentifierName = StringConstants.EMPTY;
            compIdentifierName = componentNamesBP.getName(pair.getSecondName());
            if (StringUtils.isBlank(compIdentifierName)
                  || compIdentifierNames.contains(compIdentifierName)) {
                continue;
            }
            compIdentifierNames.add(compIdentifierName);%>
    private ComponentIdentifier <%=compIdentifierName%>;
    
        <%}%>
    <%Iterator<String> compIdentifierIterator = compIdentifierNames.iterator();%>
    
    public <%=className%> (RuntimeContext _rtc<%if (compIdentifierIterator.hasNext()) {%>,<%}%>
        <%while (compIdentifierIterator.hasNext()) {
            String compIdentifierName = compIdentifierIterator.next();%>
        
        ComponentIdentifier _<%=compIdentifierName%><%if (compIdentifierIterator.hasNext()) {%>,<%}%>
        <%}%>
    ) {
        rtc = _rtc;
        <%compIdentifierIterator = compIdentifierNames.iterator();
        while (compIdentifierIterator.hasNext()) {
            String compIdentifierName = compIdentifierIterator.next();%>
        
        <%=compIdentifierName%> = _<%=compIdentifierName%>;
        <%}%>
    }
    <%} else if (node instanceof ITestSuitePO){
        ITestSuitePO ts = (ITestSuitePO)node;
        Map<String, Integer> defaultEventHandlers = ts.getDefaultEventHandler();
        boolean suppressCheckFailedDefault = false;
        boolean suppressActionErrorDefault = false;
        boolean suppressCompNotFoundDefault = false;
        boolean suppressConfigurationErrorDefault = false;
        for (String handler : defaultEventHandlers.keySet()) {
            try {
                if (handler.equals(TestErrorEvent.ID.VERIFY_FAILED)
                        && ReentryProperty.getProperty(defaultEventHandlers.get(handler))
                            == ReentryProperty.CONTINUE) {
                    suppressCheckFailedDefault = true;
                } else if (handler.equals(TestErrorEvent.ID.ACTION_ERROR)
                        && ReentryProperty.getProperty(defaultEventHandlers.get(handler))
                            == ReentryProperty.CONTINUE) {
                    suppressActionErrorDefault = true;
                } else if (handler.equals(TestErrorEvent.ID.COMPONENT_NOT_FOUND)
                        && ReentryProperty.getProperty(defaultEventHandlers.get(handler))
                            == ReentryProperty.CONTINUE) {
                    suppressCompNotFoundDefault = true;
                } else if (handler.equals(TestErrorEvent.ID.CONFIGURATION_ERROR)
                        && ReentryProperty.getProperty(defaultEventHandlers.get(handler))
                            == ReentryProperty.CONTINUE) {
                    suppressConfigurationErrorDefault = true;
                }
            } catch (InvalidDataException e) {
                Plugin.getDefault().writeErrorLineToConsole(
                        "Error while creating default event handler.", true);
            }
        }
        %>
    private RuntimeContext rtc;
    
    public <%=className%> (AUT _aut) {
        rtc = new RuntimeContext(_aut, <%=suppressCheckFailedDefault%>, <%=suppressActionErrorDefault%>, <%=suppressCompNotFoundDefault%>, <%=suppressConfigurationErrorDefault%>);
    }
    <%} else {%>
    public <%=className%> () {
        super();
    }
    <%}%>
    
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Start of execute method
//    - initializing parameters for test cases
//    - creating of event handling
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
    <%if (hasComment) {%>/** <%=comment%> */<%}%>
    public void execute(
    <%if (node instanceof ISpecTestCasePO) {
        ISpecTestCasePO tc = (ISpecTestCasePO) node;
        Iterator<IParamDescriptionPO> paramIterator = tc.getParameterListIter();
        while (paramIterator.hasNext()) {
            IParamDescriptionPO param = paramIterator.next();
            String paramType = nameLoader.findTypeForParameter(param.getType(), StringConstants.EMPTY);
            paramType = NameLoader.beautifyParamType(paramType);
            String paramName = param.getName();%>
        <%=paramType%> <%=paramName%><%if(paramIterator.hasNext()){%>,<%}%>
        <%}%>
    <%}%>
    ) {
        <%if (node instanceof ISpecTestCasePO) {%>
        AUT aut = rtc.getAUT();
        <%}%>
        
        <%if (node instanceof ISpecTestCasePO) {
            ISpecTestCasePO tc = (ISpecTestCasePO) node;
            for (IEventExecTestCasePO eventTC : tc.getAllEventEventExecTC()) {
                String eventType = eventTC.getEventType();
                String reentryProp = eventTC.getReentryProp().toString();
                if (eventType.equals(TestErrorEvent.ID.VERIFY_FAILED)) {
                    if (reentryProp.equals(ReentryProperty.CONTINUE.toString())) {%>
        
        rtc.beginIgnoreCheckFailed();
                    <%} else {%>
        
        rtc.doNotIgnoreCheckFailed();
                    <%}
                    definesLocalCheckFailedHandling = true;
                } else if (eventType.equals(TestErrorEvent.ID.ACTION_ERROR)) {
                    if (reentryProp.equals(ReentryProperty.CONTINUE.toString())) {%>
        
        rtc.beginIgnoreActionError();
                    <%} else {%>
        
        rtc.doNotIgnoreActionError();
                    <%}
                    definesLocalActionErrorHandling = true;
                } else if (eventType.equals(TestErrorEvent.ID.COMPONENT_NOT_FOUND)) {
                    if (reentryProp.equals(ReentryProperty.CONTINUE.toString())) {%>
        
        rtc.beginIgnoreCompNotFound();
                    <%} else {%>
        
        rtc.doNotIgnoreCompNotFound();
                    <%}
                    definesLocalCompNotFoundHandling = true;
                } else if (eventType.equals(TestErrorEvent.ID.CONFIGURATION_ERROR)) {
                    if (reentryProp.equals(ReentryProperty.CONTINUE.toString())) {%>
        
        rtc.beginIgnoreConfigurationError();
                    <%} else {%>
        
        rtc.doNotIgnoreConfigurationError();
                    <%}
                    definesLocalConfigurationErrorHandling = true;
                }
            }
        }
        definesLocalEventHandling =
                definesLocalCheckFailedHandling | definesLocalActionErrorHandling |
                definesLocalCompNotFoundHandling | definesLocalConfigurationErrorHandling;
        %>
        
        <%if (definesLocalEventHandling) {%>
        try {
        <%}%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Start of calling execute methods of children
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
        
        <%List<String> autList = new ArrayList<String>();%>
        
        <%childIterator = node.getNodeListIterator();
        while (childIterator.hasNext()) {
            INodePO child = childIterator.next();
            boolean isActive = child.isActive();
            comment = child.getComment();
            hasComment = StringUtils.isNotBlank(comment);
        
        if (hasComment) {%><%if (!isActive) {%>//<%}%>// Comment: <%=comment%>
        
        <%}%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Case: Child is a CAP
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
            <%if (child instanceof ICapPO) {
                ICapPO cap = (ICapPO) child;
                String componentFromCap = cap.getComponentType();
                
                // Gather information about generated component for cap from generated properies file
                // Use it to get factory to create instance of component
                
                CompNameLoader loader = new CompNameLoader(componentFromCap);
                String actionName = loader.get(cap.getActionName());
                boolean hasDefaultMapping = loader.get("hasDefaultMapping").equals("true");
                String componentNameToCreate;
                String factoryName;
                ConcreteComponent cc = null;
                CompSystem compSystem = ComponentBuilder.getInstance().getCompSystem();
                Component c = compSystem.getComponentForType(componentFromCap);
                if (c instanceof ConcreteComponent) {
                    cc = (ConcreteComponent)c;            
                }
                String compIdentifierName = StringConstants.EMPTY;
                if (hasDefaultMapping) {
                    String toolkitID = info.getDefaultToolkit();
                    factoryName = Utils.getFactoryName(toolkitID);
                  ConcreteComponent componentToCreate = ToolkitSupportBP.getMostAbstractRealizingComponentInToolkit(toolkitID, cc);
                    CompNameLoader newLoader = new CompNameLoader(componentToCreate.getType());
                    componentNameToCreate = newLoader.get("componentTypeName");
                } else {
                    factoryName = loader.get("factoryName");
                    componentNameToCreate = loader.get("componentTypeName");
                    compIdentifierName = componentNamesBP.getName(cap.getComponentName());
                }
                if (actionName != null) {%>
        
        <%if (!isActive) {%>// Hint: this line is commented out because its correspondent node in the ITE was inactive
        
        <%}%>
        <%if (!isActive) {%>//<%}%>aut.execute(
            
            <%if (!isActive) {%>//<%}%><%=factoryName%>.create<%=componentNameToCreate%>(<%if (!hasDefaultMapping && StringUtils.isNotBlank(compIdentifierName)) {%><%=compIdentifierName%><%}%>)
                
                <%if (!isActive) {%>//<%}%>.<%=actionName%>(
                <%Iterator<IParamDescriptionPO> childParamIterator = cap.getParameterListIter();
                
                // Determine parameter values for call of cap method
                
                while (childParamIterator.hasNext()) {
                    IParamDescriptionPO param = childParamIterator.next();
                    String paramType = param.getUniqueId();
                    String enumType = nameLoader.getEnumForParam(paramType);
                    String paramValue = ParamUtils.getValueForParam(cap, param, 0);
                    Boolean isEnum = enumType != null;
                    if (isEnum) {
                        enumType = NameLoader.beautifyParamType(enumType);
                    }
                    String enumLookupMethodName = isEnum && (enumType.equals("Operator")
                                                          || enumType.equals("AUTActivationMethod")
                                                          || enumType.equals("Modifier")) 
                                                      ? "literalAsEnum" 
                                                      : "valueOf";%>
                    
                <%if (!isActive) {%>//<%}%><%if (isEnum) {%><%=enumType%>.<%=enumLookupMethodName%>(<%}%><%=paramValue%><%if (isEnum) {%>)<%}%>
                    
                <%if(childParamIterator.hasNext()){%><%if (!isActive) {%>//<%}%>,<%}%>
                <%}
                if (!isActive) {%>//<%}%>),
            
            <%if (!isActive) {%>//<%}%>null);
            
                <%} else {%>
        
        // TODO: Usage of unsupported client / ITE-side action <%=cap.getActionName()%>.

                <%}%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Case: Child is an ExecTestCase
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
            <%} else if (child instanceof IExecTestCasePO) {
                IExecTestCasePO exec = (IExecTestCasePO)child;
                // spec is needed to get all necessary information
                ISpecTestCasePO spec = exec.getSpecTestCase();
                String referenceName = exec.getRealName();
                boolean hasReferenceName = StringUtils.isNotBlank(referenceName);
                String testCaseName = StringConstants.EMPTY;
                // get node information (which are used for creating a class for it)
                // about spec from global map containing all such information                
                NodeInfo specInfo = uuidToNodeInfoMap.get(spec.getGuid());
                testCaseName = classesToImport.contains(specInfo) ? specInfo.getClassName() : specInfo.getFqName();
                // Determine which component identifiers of the child need to be instanciated
                List<String> childCompIdentifierNames = Utils.determineCompIdentifierList(
                        componentNamesBP, compNamesBP, exec);
                Iterator<String> childCompIdentifierNamesIterator = childCompIdentifierNames.iterator();                
                Iterator<IParamDescriptionPO> childParamIterator;
                // Determine whether the child uses central test data
                IParameterInterfacePO dataCube = exec.getReferencedDataCube();
              if (dataCube == null) {
              
                // If there is no central test data used, execute the childs execute method for each data set.
                // The do-loop is for the case that just one set of data is defined
                
                int rowCount = exec.getDataManager().getDataSetCount();
                int row = 0;
                do {
                    childCompIdentifierNamesIterator = childCompIdentifierNames.iterator();
                    %>
        
        <%if (!isActive) {%>// Hint: this line is commented out because its correspondent node in the ITE was inactive
        
        <%}%>
        <%if (hasReferenceName) {%><%if (!isActive) {%>//<%}%>// <%=referenceName%>
        
        <%}%>
        <%if (!isActive) {%>//<%}%>new <%=testCaseName%>(
                
                <%if (!isActive) {%>//<%}%>rtc<%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%while (childCompIdentifierNamesIterator.hasNext()) {
                String childCompIdentifierName = childCompIdentifierNamesIterator.next();%>
                
                <%if (!isActive) {%>//<%}%><%=childCompIdentifierName%><%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%}%>
            
            <%if (!isActive) {%>//<%}%>).execute(
                    <%childParamIterator = exec.getParameterListIter();
                    while (childParamIterator.hasNext()) {
                        IParamDescriptionPO param = childParamIterator.next();
                        String paramValue = ParamUtils.getValueForParam(exec, param, row);%>
                
                <%if (!isActive) {%>//<%}%><%=paramValue%><%if(childParamIterator.hasNext()){%>
                
                <%if (!isActive) {%>//<%}%>,<%}%>
                    <%}%>
                    <%row++;%>
            
            <%if (!isActive) {%>//<%}%>);
                <%} while(row < rowCount);
              } else {
              
              // If there is central test data used, generate a for-loop that iterates over all data
              
                String dataCubeName = null;
                try {
                    dataCubeName = Utils.determineClassName(dataCube);
                } catch (InvalidNodeNameException e) {
                    log.error("Invalid Data Set Name", e);
                }%>
        
        <%if (!isActive) {%>// Hint: this line is commented out because its correspondent node in the ITE was inactive
        
        <%}%>
        <%if (!isActive) {%>//<%}%>for (CTDS.<%=dataCubeName%> row : CTDS.<%=dataCubeName%>.data) {
            
            <%if (hasReferenceName) {%><%if (!isActive) {%>//<%}%>// <%=referenceName%>
            
            <%}%>
            <%if (!isActive) {%>//<%}%>new <%=testCaseName%>(
                
                <%if (!isActive) {%>//<%}%>rtc<%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%while (childCompIdentifierNamesIterator.hasNext()) {
                String childCompIdentifierName = childCompIdentifierNamesIterator.next();%>
                
                <%if (!isActive) {%>//<%}%>null<%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%}%>
            
            <%if (!isActive) {%>//<%}%>).execute(
                
                    <%childParamIterator = exec.getParameterListIter();
                    while (childParamIterator.hasNext()) {
                        IParamDescriptionPO param = childParamIterator.next();
                
                if (!isActive) {%>//<%}%>row.<%=param.getName()%><%if(childParamIterator.hasNext()){%>,<%}%>
                
                    <%}%>
                <%if (!isActive) {%>//<%}%>);
        
        <%if (!isActive) {%>//<%}%>}
              <%}%>
        
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Case: Child is a RefTestSuite
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
            <%} else if (child instanceof IRefTestSuitePO) {
                IRefTestSuitePO ref = (IRefTestSuitePO)child;
                ITestSuitePO testSuite = ref.getTestSuite();
                
                String referenceName = ref.getName();
                boolean hasReferenceName = StringUtils.isNotBlank(referenceName) 
                	&& !referenceName.equals(testSuite.getName());
                
                NodeInfo testSuiteInfo = uuidToNodeInfoMap.get(testSuite.getGuid());
                String testSuiteName = classesToImport.contains(testSuiteInfo) ? testSuiteInfo.getClassName() : testSuiteInfo.getFqName();
                String autName = StringUtils.deleteWhitespace(testSuite.getAut().getName());
                Boolean newAUT = false;
                if (!autList.contains(autName) && isActive) {
                    newAUT = true;
                    autList.add(autName);
                }%>
        
        <%if (!isActive) {%>// Hint: this line is commented out because its correspondent node in the ITE was inactive
        
        <%}%>
        <%if (newAUT) {%><%if (!isActive) {%>// <%}%>AUT <%=autName%> = null; // TODO: Define AUT manually
        
        <%}%>
        <%if (!isActive) {%>// <%}%><%=autName%>.connect();
        
        <%if (hasReferenceName) {%><%if (!isActive) {%>//<%}%>// <%=referenceName%>
        
        <%}%>
        <%if (!isActive) {%>// <%}%>new <%=testSuiteName%>(<%=autName%>).execute();
        
        <%if (!isActive) {%>// <%}%><%=autName%>.disconnect();
        
            <%}%>
        <%}%>
<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Generate markers for event handling
// 
/////////////////////////////////////////////////////////////////////////////////////////////////
%>
        
        <%if (definesLocalEventHandling) {%>
        
        }
        <%}%>
        <%if (node instanceof ISpecTestCasePO) {%>
        
        <%
            ISpecTestCasePO tc = (ISpecTestCasePO) node;
            Map<String, String> reentryPropertyToException = new HashMap<String, String>();
            reentryPropertyToException.put(TestErrorEvent.ID.VERIFY_FAILED, "CheckFailedException");
            reentryPropertyToException.put(TestErrorEvent.ID.ACTION_ERROR, "ActionException");
            reentryPropertyToException.put(TestErrorEvent.ID.COMPONENT_NOT_FOUND, "ComponentNotFoundException");
            reentryPropertyToException.put(TestErrorEvent.ID.CONFIGURATION_ERROR, "ConfigurationException");
            for (IEventExecTestCasePO eventTC : tc.getAllEventEventExecTC()) {
                String eventType = eventTC.getEventType();
                String reentryProp = eventTC.getReentryProp().toString();
                String referenceName = eventTC.getRealName();
                boolean hasReferenceName = StringUtils.isNotBlank(referenceName);
                NodeInfo ehInfo = uuidToNodeInfoMap.get(eventTC.getSpecTestCase().getGuid());
                String eventHandlerName = classesToImport.contains(ehInfo) ? ehInfo.getClassName() : ehInfo.getFqName();
                Iterator<IParamDescriptionPO> childParamIterator;
                IParameterInterfacePO dataCube = eventTC.getReferencedDataCube();
                
                if (eventTC.getReentryProp().equals(ReentryProperty.RETURN)) {
                    // Determine which component identifiers of the child need to be instanciated
                    List<String> childCompIdentifierNames = Utils.determineCompIdentifierList(
                        componentNamesBP, compNamesBP, eventTC);
                    Iterator<String> childCompIdentifierNamesIterator = childCompIdentifierNames.iterator();                
                %>
        
        catch (<%=reentryPropertyToException.get(eventType)%> e) {
            log.debug("Exception during test execution", e);
            // TODO: Commented out event handler. (Commenting in does not necessarily lead to same test execution as in ITE)
                    <%
                    int rowCount = eventTC.getDataManager().getDataSetCount();
                        int row = 0;
                        do {%>
            //new <%=eventHandlerName%>(rtc<%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%while (childCompIdentifierNamesIterator.hasNext()) {
                String childCompIdentifierName = childCompIdentifierNamesIterator.next();%>
                    //<%=childCompIdentifierName%><%if (childCompIdentifierNamesIterator.hasNext()) {%>,<%}%>
            <%}%>
                //).execute(
                            <%childParamIterator = eventTC.getParameterListIter();
                            while (childParamIterator.hasNext()) {
                                IParamDescriptionPO param = childParamIterator.next();
                                String paramValue = ParamUtils.getValueForParam(eventTC, param, row);%>
                        //<%=paramValue%>
                        
                        <%if(childParamIterator.hasNext()){%>//,<%}%>
                            <%}%>
                            <%row++;%>
                        //);
                        <%} while(row < rowCount);%>
        }
                <%} else if (eventTC.getReentryProp().equals(ReentryProperty.CONTINUE)) {
                    continue;
                } else {%>
        // TODO: This test case used Event Handler which you have to replace manually:
        //       Event Type: <%=eventType%>
        //       Re-Entry Property: <%=reentryProp%>
        //       Used Test Case: <%if (hasReferenceName) {%><%=referenceName%><%}%>
                    <%int rowCount = eventTC.getDataManager().getDataSetCount();
                      int row = 0;
                      do {%>
        //            new <%=eventHandlerName%>(rtc).execute(
                          <%childParamIterator = eventTC.getParameterListIter();
                          while (childParamIterator.hasNext()) {
                              IParamDescriptionPO param = childParamIterator.next();
                              String paramValue = ParamUtils.getValueForParam(eventTC, param, row);%>
        //                <%=paramValue%><%if(childParamIterator.hasNext()){%>,<%}%>
                          <%}%>
                          <%row++;%>
        //            );
                      <%} while(row < rowCount);
                }
            }
        }%>
        
        <%if (definesLocalEventHandling) {%>
        finally {
          rtc.endLocalEventHandling(<%=definesLocalCheckFailedHandling%>, <%=definesLocalActionErrorHandling%>, <%=definesLocalCompNotFoundHandling%>, <%=definesLocalConfigurationErrorHandling%>);
        }
        <%}%>
    }
}