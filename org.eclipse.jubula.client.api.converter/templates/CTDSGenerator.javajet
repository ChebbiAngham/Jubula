<%@ jet 
package="org.eclipse.jubula.client.api.converter" 
imports="java.util.*
         org.eclipse.jubula.client.api.converter.exceptions.InvalidNodeNameException
         org.eclipse.jubula.client.api.converter.utils.ParamUtils
         org.eclipse.jubula.client.api.converter.utils.Utils
         org.eclipse.jubula.client.core.model.IParamDescriptionPO
         org.eclipse.jubula.client.core.model.IProjectPO
         org.eclipse.jubula.client.core.model.ITestDataCategoryPO
         org.eclipse.jubula.client.core.model.ITestDataCubePO
         org.eclipse.jubula.toolkit.api.gen.internal.utils.NameLoader
         org.eclipse.jubula.tools.internal.constants.StringConstants
         org.slf4j.Logger
         org.slf4j.LoggerFactory"
class="CTDSGenerator"%>
<%
Logger log = LoggerFactory.getLogger(CTDSGenerator.class);

CTDSInfo info = (CTDSInfo)argument;
String className = info.getClassName();
IProjectPO project = info.getProject();
Locale language = info.getLanguage();
String projectName = null;
try {
    projectName = Utils.translateToPackageName(project);
} catch (InvalidNodeNameException e) {
    log.error("Invalid Project Name", e);
}
String packageName = Utils.getProjectPath(info.getPackageBasePath(), projectName);

NameLoader nameLoader = NameLoader.getInstance();
ITestDataCategoryPO testDataRoot = project.getTestDataCubeCont();
List<ITestDataCubePO> testCubes = new ArrayList<ITestDataCubePO>();
Utils.fillCTDSList(testDataRoot, testCubes);
%>
package <%=packageName%>;

import java.util.ArrayList;
import java.util.List;

public class <%=className%> {

<%for (ITestDataCubePO testCube : testCubes) {%>
    <%String testCubeName = null;
    try {
        testCubeName = Utils.determineClassName(testCube);
    } catch (InvalidNodeNameException e) {
        log.error("Invalid Data Set Name", e);
    }
    int parameterCount = 0;%>
    public static class <%=testCubeName%> {
    <%for (IParamDescriptionPO param : testCube.getParameterList()) {%>
        <%parameterCount++;
        String paramName = param.getName();
        String paramType = nameLoader.findTypeForParameter(param.getType(), StringConstants.EMPTY);%>
        public <%=paramType%> <%=paramName%>;
    <%}
    Boolean testCubeSizeOkay = parameterCount < 256;%>
    
        public static List<<%=testCubeName%>> data = new ArrayList<<%=testCubeName%>>();
        
        static {
        <%for (int row = 0; row < testCube.getDataManager().getDataSetCount(); row++) {%>
          <%if (testCubeSizeOkay) {%>
            data.add(new <%=testCubeName%>(
            <%Iterator <IParamDescriptionPO> paramIterator = testCube.getParameterListIter();
            while (paramIterator.hasNext()) {%>
                <%IParamDescriptionPO param = paramIterator.next();
                String paramValue = ParamUtils.getValueForParam(
                    testCube, param, row, language);%>
                <%=paramValue%>
                
                <%if (paramIterator.hasNext()) {%>, <%}%>
            <%}%>));
          <%} else {%>
            <%String objName = "entry_" + row;%>
            <%=testCubeName%> <%=objName%> = new <%=testCubeName%>();
            <%Iterator <IParamDescriptionPO> paramIterator = testCube.getParameterListIter();
            while (paramIterator.hasNext()) {%>
                <%IParamDescriptionPO param = paramIterator.next();
                String paramValue = ParamUtils.getValueForParam(
                    testCube, param, row, language);
                String paramName = param.getName();%>
                <%=objName%>.<%=paramName%> = <%=paramValue%>
                    ;
            <%}%>
            data.add(<%=objName%>);
          <%}%>
        <%}%>
        }
    
      <%if (testCubeSizeOkay) {%>
        private <%=testCubeName%> (
        <%Iterator <IParamDescriptionPO> paramIterator = testCube.getParameterListIter();
        while (paramIterator.hasNext()) {%>
            <%IParamDescriptionPO param = paramIterator.next();
            String paramName = param.getName();
            String paramType = nameLoader.findTypeForParameter(param.getType(), StringConstants.EMPTY);%>
            <%=paramType%> _<%=paramName%><%if (paramIterator.hasNext()) {%>,<%}%>
        <%}%>
        ) {
        <%for (IParamDescriptionPO param : testCube.getParameterList()) {%>
            <%String paramName = param.getName();%>
            <%=paramName%> = _<%=paramName%>;
        <%}%>
        }
      <%} else {%>
        private <%=testCubeName%> () {
            super();
        }
      <%}%>
    }
    
<%}%>

}