<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Copyright (c) 2014 BREDEX GmbH.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
-->

<section xml:id="concatenating-combining-parameters" version="5.0" xmlns="http://docbook.org/ns/docbook"
                                                               xmlns:xi="http://www.w3.org/2001/XInclude"
                                                               xmlns:xl="http://www.w3.org/1999/xlink" >
  <title>Concatenating (combining) parameters</title>
  <anchor role="helpid" condition="guidancerPropertiesViewContextId" xml:id="concatenating-combining-parameters.guidancerPropertiesViewContextId" xreflabel="Properties View"/>
  <anchor role="helpid" condition="guidancerDataSetViewContextId" xml:id="concatenating-combining-parameters.guidancerDataSetViewContextId" xreflabel="Data Sets View"/>
  <para>
    The ITE lets you use various different types of parameter:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Concrete values (<xref linkend="entering-concrete-values-as-data-in-test-cases"/>).
      </para>
    </listitem>
    <listitem>
      <para>
        Referenced parameters (<xref linkend="using-references-for-data-in-test-cases"/>).
      </para>
    </listitem>
    <listitem>
      <para>
        Variables (<xref linkend="using-variables-as-data-for-test-cases"/>).
      </para>
    </listitem>
    <listitem>
      <para>
        Functions (<xref linkend="using-functions-as-data-for-test-cases"/>).
      </para>
    </listitem>
  </itemizedlist>
  <para>
    You can use these parameters separately, or you can combine them
    to create a parameter value. This is useful if a value you want
    to enter or check consists of parts that change and parts that
    stay the same.
  </para>
  <para>
    To combine different types of parameter to make one value, you
    must write them in a specific way:
  </para>
  <orderedlist>
    <listitem>
      <para>
        Referenced parameters can be either written with curly brackets around the reference name:
      </para>
      
      <para>
        <emphasis role="input">={REF_NAME}</emphasis>
      </para>
      <para>
       or you can use a shorthand: the = sign followed by the name of the reference like:
      </para>
      <para>
        <emphasis role="input">=REF_NAME</emphasis>
      </para>
    </listitem>
    <listitem>
      <para>
        Variable names can also be either written with curly brackets around them:
      </para>
      
      <para>
        <emphasis role="input">${VAR_NAME}</emphasis>
      </para>
      <para>
       or you can use a shorthand: the $ sign followed by the name of the reference like:
      </para>
      <para>
        <emphasis role="input">$VAR_NAME</emphasis>
      </para>
    </listitem>
    <listitem>
      <para>
        Concrete values are written as normal.
      </para>
    </listitem>
    <listitem>
      <para>
        For example, you can build a data string that contains all four types of data:
      </para>
      
      <para>
        <emphasis role="input">test_={PROJECTNAME}_${CUSTOMERNUMBER}_?now()</emphasis>
      </para>
      <para>
       Be careful with the shorthand notation: the parser interprets all allowed characters following
       an = or $ sign to be part of the name of the reference or variable, for example:
      </para>
      <para>
       <emphasis role="input">test_=PRo1_JÖCT_$NAMÄ</emphasis>
      </para>
      <para>
       is interpreted by the parser as
      </para>
      <para>
       <emphasis role="input">test_={PRo1_J}ÖCT_${NAM}Ä</emphasis>,
      </para>
      <para>
       so it uses the reference 'PRo1_J' and the variable 'NAM'.
      </para>
    </listitem>
  </orderedlist>
</section>