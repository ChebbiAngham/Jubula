<section id="rcpaut" version="5.0" xmlns="http://docbook.org/ns/docbook"
                                   xmlns:xi="http://www.w3.org/2001/XInclude"
                                   xmlns:xl="http://www.w3.org/1999/xlink" >
  <title>Testing RCP AUTs</title>
  <anchor role="helpid" id="projectWizardContextId">Creating a Project</anchor>
  <anchor role="helpid" id="autSettingWizardPagePageContextId">Defining an AUT</anchor>
  <anchor role="helpid" id="autConfigSettingWizardPagePageContextId">Configuring an AUT</anchor>
  <anchor role="helpid" id="supportRCPAUTStartDelayContextId">Starting RCP AUTs</anchor>
  <anchor role="helpid" id="autConfigPropDialogContextId">Adding/editing AUT configurations</anchor>
  <para>
    You can write tests for RCP AUTs by selecting the toolkit
    <emphasis>concrete</emphasis> or <emphasis>RCP</emphasis> from the Project
    properties. If you will need to test RCP-specific components (such
    as toolbars with drop-down menus, or tree-tables), you will need
    to select <emphasis>RCP</emphasis> as the toolkit for the Project.
  </para>
  <para>
    When you select RCP as the Project toolkit, the library
    Projects <emphasis>unbound_modules_concrete</emphasis>,
    <emphasis>unbound_modules_swt</emphasis> and <emphasis>unbound_modules_rcp</emphasis>
    are automatically reused in your Project. The actions in
    these libraries are described in the reference manual.
  </para>
  <para>
    <para role="tip">The GEF toolkit is a subset of the <emphasis>RCP</emphasis> toolkit and is described in a later <xref linkend="geftest"/>. </para>
  </para>
  <section id="supported-rcp-auts">
    <title>Supported RCP AUTs</title>
    <para>
      AUTs written with the RCP GUI toolkit are supported according to
      the following points:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The AUT is written using Java 1.5 or higher.
        </para>
      </listitem>
      <listitem>
        <para>
          It uses a Java SE (Standard Edition) JRE.
        </para>
      </listitem>
      <listitem>
        <para>
          The AUT must use SWT version 3.1 or higher. For Mac systems,
          the version of SWT used must be 3.6 or higher.
        </para>
      </listitem>
      <listitem>
        <para>
          Eclipse versions 3.1-3.x and 4.x (with and without the
          compatibility layer) are currently testable.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="setting-up-an-rcp-aut-for-testing">
    <title>Setting up an RCP AUT for testing</title>
    <para>
      If you want to test a <emphasis>Rich Client Platform</emphasis>
      application, you must ensure that our ”<emphasis>RCP Remote
      Control</emphasis>” plugin (org.eclipse.jubula.rc.rcp) is added
      to your AUT and that it will be started when the AUT starts. If
      you are working in a continuous build and test process, then we
      highly recommend doing this as a part of the product build, or
      just afterwards (<xref linkend="setting-up-an-rcp-aut"/>). For testing purposes,
      and to get started quicker, the steps can also be done manually
      as follows:
    </para>
    <para>
      <para role="warning">Please ensure that you follow all these steps!</para>
    </para>
    <orderedlist>
      <listitem>
        <para>
          Locate the installation directory, and open the
          <emphasis>development</emphasis> folder.
        </para>
      </listitem>
      <listitem>
        <para>
          Extract the content of the
          <emphasis>rcp-support.zip</emphasis> folder into the
          <emphasis>plugins</emphasis> directory for your RCP AUT.
        </para>
      </listitem>
      <listitem>
        <para>
          RCP applications generally have a configuration/config.ini
          file which contains the parameter
          <emphasis>osgi.bundles</emphasis>. This parameter needs to
          be modified to allow the RCP remote control plugin to load
          on AUT startup. You must add
          <emphasis>,org.eclipse.jubula.rc.rcp@start</emphasis> (the
          comma is important to delimit this argument from the others)
          to the end of the <emphasis>osgi.bundles</emphasis>
          parameter.
        </para>
      </listitem>
      <listitem>
        <para>
          Start your AUT <emphasis role="strong">normally</emphasis>
          (i.e. not as an AUT. Close it, and then start it again.
        </para>
      </listitem>
      <listitem>
        <para>
          In your AUT, open <emphasis role="menuPath">Help</emphasis>--&gt;<emphasis role="menuPath">About</emphasis>.
        </para>
      </listitem>
      <listitem>
        <para>
          In the <emphasis>plugin details</emphasis> for your AUT, you
          should be able to see that the following plugins are
          started:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              org.eclipse.jubula.rc.rcp
            </para>
          </listitem>
          <listitem>
            <para>
              org.eclipse.jubula.rc.rcp.common
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          If you can see these plugins, then you can continue and
          start your AUT via e.g. an AUT configuration
          (<xref linkend="configuring-a-java-aut-ite-start"/>) or via
          <emphasis>autrun</emphasis> (<xref linkend="starting-java-with-the-command"/>).
        </para>
      </listitem>
      <listitem>
        <para>
          If you cannot see these plugins, then you should speak to a
          member of the development team to implement the suggestions
          described in the section below (<xref linkend="setting-up-an-rcp-aut"/>).
        </para>
      </listitem>
    </orderedlist>
    <para>
      <para role="tip">When you install a new version of the ITE, you must
      repeat these steps with the new RCP remote control plugin. We
      recommend starting your AUT once with <emphasis role="input">-clean</emphasis> to
      ensure that the new remote control plugin is used. </para> If you do
      not follow these steps, the AUT Agent will not be able to
      communicate with your AUT!
    </para>
    <section id="setting-up-an-rcp-aut">
      <title>Setting up an RCP AUT for testing as a part of the build
      process</title>
      <para>
        We recommend adding the RCP accessor to your AUT automatically
        in one of the following ways. Which way you choose will depend
        on your AUT, build process and Eclipse version, and you should
        check with the development team which approach is best:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            During the product build:
          </term>
          <listitem>
            <para>
              Adding the RCP Accessor as a plugin to your AUT as it is
              being built is one way to ensure that it is present and
              started when the AUT starts.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Via the OSGI console:
          </term>
          <listitem>
            <para>
              If adding the Accessor during the build is not an
              option, then you can add it after the build via the OSGI
              console. The availability of this option is dependent on
              the version of Eclipse you use, and your AUT: It must
              allow this type of post-hoc inclusion of plugins for
              this to work.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Via the P2 director:
          </term>
          <listitem>
            <para>
              Alternatively, you can add it after the product build
              using the P2 director. The availability of this option
              is dependent on the version of Eclipse you use, and your
              AUT: It must allow this type of post-hoc inclusion of
              plugins for this to work.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section id="keyboard-layouts">
    <title>Keyboard Layouts</title>
    <para>
      For RCP AUTs, a keyboard layout must be entered in the
      AUT configuration (<xref linkend="advanced-aut-config"/>). German (DE)
      and English (US) are provided as standard keyboard layouts.
    </para>
    <para>
      If you require a different keyboard layout, you must create a mapping file for the new language and place it in the server/resources directory. You also have to put this mapping file into the RCP Remote Control plug-in of your AUT:
    </para>
    <para>
      &lt;RCPAUT&gt;/plugins/org.eclipse.jubula.rc.rcp_&lt;Version&gt;/resources
    </para>
  </section>
  <section id="design-for-testability-in-rcp">
    <title>Design for testability in RCP</title>
    <section id="naming-components-1">
      <title>Naming components</title>
      <para>
        Although components can be located in the AUT even when they
        are not named by the developers, naming components is
        nevertheless a good idea. In SWT and RCP there is no method
        like the Swing <emphasis>setName</emphasis> method to name
        components in the program code. However, you can improve the
        testability of your application by using the following method
        in your SWT or RCP code for the current component class:
        <emphasis>setData(String key, String
        ComponentName)</emphasis>. For the key, use
        <emphasis>TEST_COMP_NAME</emphasis>.
      </para>
      <para>
        Even if you do not name components, you can choose to have
        unique names generated for your components in the AUT in the
        AUT dialog (<xref linkend="define-aut"/>).
      </para>
    </section>
    <section id="adding-support-for-text-retrieval-1">
      <title>Adding support for text retrieval</title>
      <para>
        You can add support for renderers for SWT components or items
        without the getText() method in order to access text that is
        otherwise non-readable during test execution.
      </para>
      <para>
        Use the method
        <emphasis role="input">setData(String key, Object value)</emphasis> on the
        instance of the component or item whose text you want to
        access. The <emphasis>key</emphasis> is
        <emphasis role="input">TEST_TESTABLE_TEXT</emphasis>
      </para>
      <para>
        For example, to access an otherwise unreachable text on a label:
        
        <para>
          <emphasis role="input">myLabel.setData(&quot;TEST_TESTABLE_TEXT&quot;, label);</emphasis>
        </para>
      </para>
      <para>
        If you are making text in e.g. a table accessible, then you will need to add a dynamic part for the column, e.g.:
      </para>
<programlisting>
myTableItemInstance.setData
(&quot;TEST_TESTABLE_TEXT_&quot; + colIdx, text);
</programlisting>
    </section>
  </section>
  <section id="rcp-component-name-generation">
    <title>Component name generation in RCP</title>
    <anchor role="helpid" id="autSettingWizardPagePageContextId">Defining an AUT</anchor>
    <anchor role="helpid" id="autWizardPageGenerateNamesPageContextId">Name Generation in RCP</anchor>
    <anchor role="helpid" id="autSettingsPageContextId">Adding/editing AUT's</anchor>
    <para>
      RCP AUTs often use wizards and standard dialogs. The components
      in these dialogs are not often named by developers, and are in
      different places on Windows, Linux and Mac systems.
    </para>
    <para>
      You can decide if unique names should be generated for these
      components in your AUT, if no name has been given. You can
      configure this in the AUT settings (<xref linkend="define-aut"/>). We
      recommend selecting this option, as it makes your tests more
      robust to any changes and also makes platform-independent
      testing possible in RCP AUTs.
    </para>
  </section>
  <section id="best-practices-for-testing-rcp-auts">
    <title>Best practices for testing RCP AUTs</title>
    <para>
      <emphasis role="strong">Perspective layout reset</emphasis><?linebreak?>
      One of the features of RCP AUTs is that they generally remember the state of the AUT (position of views, which perspective was open) when the AUT is closed. In order to make tests as robust as possible, we recommend starting each use case with a module to reset the perspective to its defaults, and testing with this default perspective.
    </para>
    <para>
      <emphasis role="strong">Workspace choice</emphasis><?linebreak?>
      RCP AUTs use a workspace to save user-specific preferences. The choice of workspace is usually offered before the AUT starts. This dialog is not currently testable, so we recommend adding the desired workspace as an AUT argument in the AUT configuration (<xref linkend="configuringaut"/>). The parameter used to specify the workspace is <emphasis role="input">-data ''WORKSPACE''</emphasis>.
    </para>
  </section>
</section>