<section id="testing-swing-auts" version="5.0" xmlns="http://docbook.org/ns/docbook"
                                               xmlns:xi="http://www.w3.org/2001/XInclude"
                                               xmlns:xl="http://www.w3.org/1999/xlink" >
  <title>Testing Swing AUTs</title>
  <anchor role="helpid" id="projectWizardContextId">Creating a Project</anchor>
  <anchor role="helpid" id="autConfigSettingWizardPagePageContextId">Configuring an AUT</anchor>
  <anchor role="helpid" id="autConfigPropDialogContextId">Adding/editing AUT configurations</anchor>
  <para>
    You can write tests for Swing AUTs when you select the
    toolkit <emphasis>concrete</emphasis> or <emphasis>Swing</emphasis> in the Project
    properties. The Swing and concrete toolkits actually contain the
    same actions as each other.
  </para>
  <para>
    When you select Swing as the Project toolkit, the library
    Project <emphasis>unbound_modules_concrete</emphasis> is automatically
    reused in your Project. The actions in this library are
    described in the reference manual.
  </para>
  <section id="supported-swing-auts">
    <title>Supported Swing AUTs</title>
    <para>
      AUTs written with the Swing GUI toolkit are supported according
      to the following points:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The AUT is written using Java 1.5 or higher.
        </para>
      </listitem>
      <listitem>
        <para>
          It uses a Java SE (Standard Edition) JRE. <para role="warning">AUTs based
          on the NetBeans framework, and NetBeans itself, are
          currently not supported.</para>
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="design-for-testability-in-swing">
    <title>Design for testability in Swing</title>
    <section id="naming-components">
      <title>Naming components</title>
      <para>
        Although components in the AUT can be recognized even when
        they are not named by the developers, using the
        <emphasis>setName</emphasis> method for the current Swing
        component class certainly makes it easier to test AUTs. Even
        if a whole area of the AUT has changed, the component will
        still be found based on this unique name.
      </para>
    </section>
    <section id="adding-support-for-text-retrieval">
      <title>Adding support for text retrieval</title>
      <para>
        You can add support for renderers for Swing components without
        the getText() method in order to access text that is otherwise
        non-readable during test execution.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            An example of the adapter mechanism can be found here:
            
            <para>
              <emphasis>http://git.eclipse.org/c/jubula/org.eclipse.jubula.core.git/</emphasis><?linebreak?>
              <emphasis>tree/org.eclipse.jubula.examples.extension.swing.rc.renderer</emphasis>
            </para>
          </para>
        </listitem>
        <listitem>
          <para>
            This does not replace the support for custom Swing
            renderers that can be changed directly by your developers.
          </para>
        </listitem>
        <listitem>
          <para>
            If you are able to change the renderers yourself, you can
            still implement one of the following in your renderer:
          </para>
          <blockquote>
            <para>
              public String getTestableText(); public String
              getText();
            </para>
          </blockquote>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>