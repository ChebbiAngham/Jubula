<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2015 BREDEX GmbH.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
 -->
<chapter xml:id="toolkitExtension" version="5.0" xmlns="http://docbook.org/ns/docbook"
                                             xmlns:xi="http://www.w3.org/2001/XInclude"
                                             xmlns:xl="http://www.w3.org/1999/xlink">
  <?dbhtml dir="toolkitExtension"?>
  <title>Creating toolkit extensions for custom UI widgets</title>
  <para>When developing graphical applications, it is often necessary or 
 convenient to alter or combine the functionality of existing toolkit 
 components, or even to write entirely new ones, as the requirements or concept 
 of the software may dictate. These new components generally cannot be tested 
 "out of the box", as the behavior of custom components cannot be predicted, or 
 they may deviate from established standards of "look and feel". In order to 
 overcome this limitation, there is an extension API, which you can use to be 
 able to test your custom components.</para>
 <para>The following sections describe the steps involved in writing 
 extensions.</para>
 <para>AUTs are started, controlled and observed using its remote control 
 component. In order for the AUT Agent to know how to control each element of a 
 GUI, we have outfitted the AUT Agent with a pluggable interface for graphic 
 components. An adapter factory containing one or more components must be 
 implemented for and deployed with the AUT. On the client side, each GUI 
 toolkit that the ITE supports is described in a toolkit plug-in.</para>
 <para>We have opened up an interface to our users to allow flexible 
 customizations. You can extend existing functionality, or provide support for 
 in-house graphic components by implementing your own 
 <emphasis role="strong">Tester Classes.</emphasis></para>
  <para>
    The following chapter describes the general steps to take for
    creating an ITE toolkit extension with custom defined components and
    actions. This chapter begins by listing the requirements followed by
    showing the necessary steps for creating an ITE and remote control
    extension. The ITE toolkit extension is described in <xref linkend="iteExtension"/>
    and the implementation for the remote control extension in <xref linkend="remoteControlExtension"/>.
  </para>
  <para>
    Extension examples with source code can be found in the subdirectory
    
    <para>
      <emphasis role="input">examples/development/extension/src/</emphasis>
    </para>
    of the installation.
  </para>
  <para>
    In general you always have to extend two things:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The ITE toolkit extension – by writing your own <emphasis role="strong">toolkit</emphasis> plug-in:
        This will tell the ITE which new components and actions are available.
      </para>
    </listitem>
    <listitem>
    <para>
      The remote control extension – by writing your own <emphasis role="strong">fragment</emphasis>:
      This part actually performs the actions on the new components.
    </para>
    </listitem>
  </itemizedlist>
  <para>
    In this chapter all used directory names are located in the
    installation directory as long as nothing else is specified.
  </para>

  <xi:include href="sectionRequirements.xml"/>
  <xi:include href="sectionITEExtension.xml"/>
  <xi:include href="sectionRemoteControlExtension.xml"/>
  <xi:include href="sectionExtensionExamples.xml"/>
  
</chapter>