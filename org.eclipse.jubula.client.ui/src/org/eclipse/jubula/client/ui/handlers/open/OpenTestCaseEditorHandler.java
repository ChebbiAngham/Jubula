/*******************************************************************************
 * Copyright (c) 2004, 2010 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.jubula.client.ui.handlers.open;

import java.util.Iterator;

import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jubula.client.core.businessprocess.db.NodeBP;
import org.eclipse.jubula.client.core.model.INodePO;
import org.eclipse.jubula.client.core.model.ISpecTestCasePO;
import org.eclipse.jubula.client.ui.Plugin;
import org.eclipse.jubula.client.ui.constants.Constants;
import org.eclipse.jubula.client.ui.editors.TestCaseEditor;
import org.eclipse.jubula.client.ui.views.TestCaseBrowser;


/**
 * Handler to open the SpecTestCaseEditor.
 *
 * @author BREDEX GmbH
 * @created 05.09.2005
 */
public class OpenTestCaseEditorHandler extends AbstractOpenHandler {
    /**
     * {@inheritDoc}
     */
    public Object execute(ExecutionEvent event) {
        TestCaseBrowser testSpecTreeView = (TestCaseBrowser)Plugin
                .getView(Constants.TC_BROWSER_ID);
        if (testSpecTreeView == null) {
            return null;
        }
        if (!(testSpecTreeView.getTreeViewer()
                .getSelection() instanceof IStructuredSelection)) {
            return null;
        }
        IStructuredSelection selection = (IStructuredSelection)testSpecTreeView
                .getTreeViewer().getSelection();
        Iterator iter = selection.iterator();
        while (iter.hasNext()) {
            INodePO selectedNode = (INodePO)iter.next();
            INodePO editableNode = findEditableNode(selectedNode);
            if (editableNode == null) {
                return null;
            }
            TestCaseEditor editor = (TestCaseEditor)openEditor(editableNode);
            if (editor != null) {
                editor.setOpeningSelection(selectedNode);
            }
        }
        return null;
    }
    
    /**
     * {@inheritDoc}
     */
    protected boolean isEditableImpl(INodePO selected) {
        return selected instanceof ISpecTestCasePO 
            && NodeBP.isEditable(selected); 
    }
}