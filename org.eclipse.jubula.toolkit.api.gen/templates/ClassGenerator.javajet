<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
			org.eclipse.jubula.toolkit.api.gen.internal.GenerationInfo 
			org.eclipse.jubula.toolkit.api.gen.internal.NameLoader
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Action
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Component
		   org.eclipse.jubula.tools.internal.xml.businessmodell.ConcreteComponent
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Param" 
class="ClassGenerator"%>
<%
	GenerationInfo genInfo = (GenerationInfo)argument;
	Component component = genInfo.getComponent();
	String toolkitName = genInfo.getToolkitName();
	String packageName = genInfo.getPackageName();
	String className = genInfo.getClassName();
	Boolean genInterface = genInfo.generatesInterface();
	
	GenerationInfo implementsInfo = null;
	String implementedTypeFqn = null;
	if (!genInterface) {
		implementsInfo = new GenerationInfo(component, true);
		implementedTypeFqn = implementsInfo.getFqn();
	}
	
	NameLoader nameLoader = NameLoader.getInstance();
	List<Action> actions = component.getActions();
	List<Component> realized = component.getRealized();
	Component realizedComponent = realized.size() > 0 ? realized.get(0) : null;
	Boolean hasRealizedType = (realizedComponent != null);
	String realizedType = null;
	GenerationInfo superInfo = null;
	List<Action> superActions = null;
	String realizedTypeFqn = null;
	if (hasRealizedType) {
		realizedType = realizedComponent.getType();
		superInfo = new GenerationInfo(realizedComponent, genInterface);
		superActions = realizedComponent.getActions();
		realizedTypeFqn = superInfo.getFqn();
	}
	String testerClass = "";
	Boolean hasDefaultMapping = false;
	if (component instanceof ConcreteComponent) {
		ConcreteComponent concreteComponent = (ConcreteComponent)component;
		testerClass = concreteComponent.getTesterClass();
		hasDefaultMapping = concreteComponent.hasDefaultMapping();
	}
	%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import org.eclipse.jubula.toolkit.internal.annotations.RealizedType;
import org.eclipse.jubula.toolkit.internal.annotations.TesterClass;

@RealizedType(realizedType="<%=realizedType%>")
@TesterClass(testerClass="<%=testerClass%>")
public <%if (genInterface) {%>interface<%} else {%>class<%}%> <%=className%>
	<%if (hasRealizedType) {%>extends <%=realizedTypeFqn%><%}%>
	<%if (!genInterface) {%>implements <%=implementedTypeFqn%><%}%> {
	<%// generate constructor only for implementation classes%>
	<%if (!genInterface) {%>
		<%/* check whether constructor should call super
		and whether contsructor needs an object mapping */%>
		<%if (hasRealizedType) {%>
			<%if (hasDefaultMapping) {%>
			public <%=className%>() {
				super();
			}<%} else {%>
			Object m_component;
			public <%=className%>(Object component) {
				super(component);
			}<%}%>
		<%} else {%>
			<%if (hasDefaultMapping) {%>
			public <%=className%>() {
				super();
			}<%} else {%>
			Object m_component;
			public <%=className%>(Object component) {
				super();
				m_component = component;
			}<%}%>
		<%}%>
	<%}%>
	<%
	if (superActions != null) {
		// generate only methods for non-inherited actions
		actions.removeAll(superActions);
	}
	// generate method for each action
	Iterator<Action> actionsIterator = actions.iterator();
	while (actionsIterator.hasNext()) {	
		Action action = actionsIterator.next();
		String actionName = nameLoader.translateFromCompSystem(action.getName());
		List<Param> params = action.getParams();
		%>
		<%if (action.isDeprecated()) {%>@Deprecated<%}%>
		public void <%=actionName%>(
		<%	
		// add parameters to method
		Iterator<Param> paramIterator = params.iterator();
		while (paramIterator.hasNext()) {
			Param param = paramIterator.next();
			String type = param.getType();
			String name = param.getName();
			String paramType = nameLoader.findEnumForParameter(type, name);
			String paramName = nameLoader.translateFromCompSystem(name);
			%>
			<%=paramType%> <%=paramName%><%if(paramIterator.hasNext()){%>,<%}%>
		<%}%>
		) <%if (genInterface) {%>;<%} else {%>{}<%}%>
	<%}%> 
}