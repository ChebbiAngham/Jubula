<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
			org.eclipse.jubula.toolkit.api.gen.internal.genmodel.ComponentGenInfo
			org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CommonGenInfo 
			org.eclipse.jubula.toolkit.api.gen.internal.utils.NameLoader
			org.eclipse.jubula.toolkit.enums.LiteralProvider
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Action
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Component
		   org.eclipse.jubula.tools.internal.xml.businessmodell.ConcreteComponent
		   org.eclipse.jubula.tools.internal.xml.businessmodell.Param" 
class="ClassGenerator"%>
<%
CommonGenInfo genInfo = (CommonGenInfo)argument;
Object specInfo = genInfo.getSpecificInformation();
if (specInfo instanceof ComponentGenInfo) {
	ComponentGenInfo compGenInfo = (ComponentGenInfo) specInfo;
	String toolkitName = genInfo.getToolkitName();
	String className = genInfo.getClassName();
	Component component = compGenInfo.getComponent();
	Boolean genInterface = compGenInfo.generatesInterface();
	Boolean hasDefaultMapping = compGenInfo.hasDefaultMapping();
	String packageName = null;
	if (genInterface) {
		packageName = compGenInfo.getInterfacePackageName();
	} else {
		packageName = genInfo.getClassPackageName();
	}
	String implementedTypeFqn = compGenInfo.getFqInterfaceName();
	
	NameLoader nameLoader = NameLoader.getInstance();
	List<Action> actions = new ArrayList<>(component.getActions());
	List<Component> realized = component.getRealized();
	Component realizedComponent = realized.size() > 0 ? realized.get(0) : null;
	Boolean hasRealizedType = (realizedComponent != null);
	String realizedType = null;
	CommonGenInfo superInfo = null;
	List<Action> superActions = null;
	String realizedTypeFqn = null;
	if (hasRealizedType) {
		realizedType = realizedComponent.getType();
		superInfo = new CommonGenInfo(realizedComponent);
		superActions = realizedComponent.getActions();
		if (genInterface) {
			ComponentGenInfo superCompGenInfo = new ComponentGenInfo(
				realizedComponent, true, superInfo.getToolkitName(),
				superInfo.getClassName());
			realizedTypeFqn = superCompGenInfo.getFqInterfaceName();
		} else {
			realizedTypeFqn = superInfo.getFqClassName();
		}
	}
	String testerClass = "";
	String componentClassName = "";
	Boolean hasComponentClass = false;
	if (component instanceof ConcreteComponent) {
		ConcreteComponent concreteComponent = (ConcreteComponent)component;
		testerClass = concreteComponent.getTesterClass();
		componentClassName = concreteComponent.getComponentClass().getName();
		if (!componentClassName.isEmpty()) {
			hasComponentClass = true;
		}
	}
	%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jubula.communication.CAP;
<%if (!genInterface) {%>
import org.apache.commons.lang.Validate;
import org.eclipse.jubula.communication.internal.message.MessageCap;
import org.eclipse.jubula.communication.internal.message.MessageParam;
import org.eclipse.jubula.tools.ComponentIdentifier;
import org.eclipse.jubula.tools.internal.objects.IComponentIdentifier;
import org.eclipse.jubula.toolkit.internal.annotations.RealizedType;
import org.eclipse.jubula.toolkit.internal.annotations.TesterClass;
<%}%>

/**
 * <%if (genInterface) {%>Interface<%} else {%>Class<%}%> representing the <%=className%> component from the <%=toolkitName%> toolkit.
<%if (genInterface) {%> 
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
<%}%>
 */
<%if (!genInterface) {%>
<%if (realizedType != null && !realizedType.isEmpty()) {%>
@RealizedType(realizedType="<%=realizedType%>")<%}%>
<%if (testerClass != null && !testerClass.isEmpty()) {%>
@TesterClass(testerClass="<%=testerClass%>")<%}%>
<%}%>
public <%if (genInterface) {%>interface<%} else {%>class<%}%> <%=className%>
	<%if (hasRealizedType) {%>extends <%=realizedTypeFqn%><%}%>
	<%if (!genInterface) {%>implements <%=implementedTypeFqn%><%}%> {
	<%// generate constructor only for implementation classes%>
	<%if (!genInterface) {%>
		<%/* check whether constructor should call super
		and whether constructor needs an object mapping */%>
		<%if (hasRealizedType) {%>
			<%if (hasDefaultMapping) {%>
			public <%=className%>() {
				super();
			}<%} else {%>
			public <%=className%>(@NonNull ComponentIdentifier componentIdentifier) {
				super(componentIdentifier);
			}<%}%>
		<%} else {%>
			<%if (hasDefaultMapping) {%>
			public <%=className%>() {
				super();
			}<%} else {%>
			@NonNull protected IComponentIdentifier m_componentIdentifier;
			public <%=className%>(@NonNull ComponentIdentifier componentIdentifier) {
				super();
				Validate.isTrue(componentIdentifier instanceof IComponentIdentifier);
				m_componentIdentifier = (IComponentIdentifier) componentIdentifier;
			}<%}%>
		<%}%>
	<%}%>
	
	<%if (!genInterface && hasDefaultMapping) {%>
	protected IComponentIdentifier getPseudoComponentIdentifier() {
		<%if (hasComponentClass) {%>
		org.eclipse.jubula.tools.internal.objects.ComponentIdentifier pseudoIdentifier =
			new org.eclipse.jubula.tools.internal.objects.ComponentIdentifier();
		pseudoIdentifier.setComponentClassName("<%=componentClassName%>"); //$NON-NLS-1$
		return pseudoIdentifier;
		<%} else {%>
		return null;
		<%}%>
	}<%}%>
	
	<%
	if (superActions != null) {
		// generate only methods for non-inherited actions
		actions.removeAll(superActions);
	}
	// generate method for each action
	Iterator<Action> actionsIterator = actions.iterator();
	while (actionsIterator.hasNext()) {	
		Action action = actionsIterator.next();
		if (action.isClientAction()) {
			continue;
		}
		String methodName = nameLoader.translateFromCompSystem(action.getName());
		List<Param> params = action.getParams();
		%>
		<%if (action.isDeprecated()) {%>@Deprecated<%}%>
		@NonNull public CAP <%=methodName%>(
		<%	
		// add parameters to method
		Map<String, String> paramMap = new HashMap<String, String>();
		Iterator<Param> paramIterator = params.iterator();
		while (paramIterator.hasNext()) {
			Param param = paramIterator.next();
			String type = param.getType();
			String name = param.getName();
			String paramType = nameLoader.findTypeForParameter(type, name);
			String paramName = nameLoader.translateFromCompSystem(name);
			paramMap.put(name, paramType);
			%>
			@NonNull <%=paramType%> <%=paramName%><%if(paramIterator.hasNext()){%>,<%}%>
		<%}%>
		) throws IllegalArgumentException<%if (genInterface) {%>;<%} else {%> {
			MessageCap messageCap = new MessageCap();
			messageCap.setMethod("<%=action.getMethod()%>"); //$NON-NLS-1$
			messageCap.sethasDefaultMapping(<%=hasDefaultMapping%>);
			<%if (!hasDefaultMapping) {%>
			messageCap.setCi(m_componentIdentifier);
			<%} else {%>
			messageCap.setCi(getPseudoComponentIdentifier());<%}%>
			<%for (Param parameter : params) {
			String paramName = parameter.getName();%>
			<%String translatedParamName = nameLoader.translateFromCompSystem(paramName);%>
			Validate.notNull(<%=translatedParamName%>, "Argument '<%=translatedParamName%>' must not be null"); //$NON-NLS-1$
				<%String paramType = paramMap.get(paramName);%>
				<%if (nameLoader.isInEnumMap(paramType)) {%>
			messageCap.addMessageParam(new MessageParam(<%=translatedParamName%>.rcValue(), "java.lang.String")); //$NON-NLS-1$
				<%} else {%>
			messageCap.addMessageParam(new MessageParam(<%=translatedParamName%>.toString(), "<%=paramType%>")); //$NON-NLS-1$
				<%}%>
			<%}%>
			return messageCap;
		}<%}%>
	<%}%>
}
<%}%> 