<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
			org.eclipse.jubula.toolkit.api.gen.internal.FactoryInfo
			org.eclipse.jubula.toolkit.api.gen.internal.GenerationInfo" 
class="FactoryGenerator"%>
<%
	GenerationInfo genInfo = (GenerationInfo)argument;
	String factoryName = genInfo.getClassName();
	String packageName = genInfo.getClassPackageName();
	String superFactory = genInfo.getSuperFactoryName();
%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

public abstract class <%=factoryName%> <%if (superFactory != null) {%>extends <%=superFactory%> <%}%> {

<%for (FactoryInfo factoryInfo : genInfo.getComponentList()) {
	String componentName = factoryInfo.getComponentName();
	String className = factoryInfo.getClassName();
	String interfaceName = factoryInfo.getInterfaceName();
	Boolean hasDefaultMapping = factoryInfo.hasDefaultMapping();%>
	<%if (hasDefaultMapping) {%>
	public static <%=interfaceName%> create<%=componentName%> () {
		return new <%=className%>();
	}<%} else {%>
	public static <%=interfaceName%> create<%=componentName%> (Object identifier) {
		return new <%=className%>(identifier);
	}<%}%>
<%}%>
}