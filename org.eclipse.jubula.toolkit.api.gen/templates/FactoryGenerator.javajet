<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
			org.eclipse.jubula.toolkit.api.gen.internal.genmodel.FactoryGenInfo
			org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CompInfoForFactoryGen
			org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CommonGenInfo" 
class="FactoryGenerator"%>
<%
CommonGenInfo genInfo = (CommonGenInfo)argument;
String factoryName = genInfo.getClassName();
String packageName = genInfo.getClassPackageName();
Object specInfo = genInfo.getSpecificInformation();
if (specInfo instanceof FactoryGenInfo) {
	FactoryGenInfo factoryInfo = (FactoryGenInfo) specInfo;
	List<CompInfoForFactoryGen> compInfoList = factoryInfo.getCompInformation();
	String toolkitInfoName = factoryInfo.getToolkitInfoName();
	String toolkitInfoFqName = factoryInfo.getToolkitInfoFqName();
%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import org.eclipse.jubula.tools.ComponentIdentifier;
import org.eclipse.jubula.toolkit.ToolkitInfo;

<%if (toolkitInfoFqName != null) {%>import <%=toolkitInfoFqName%>;<%}%>

/**
 * Generated factory for creating components from the <%=genInfo.getToolkitName()%> toolkit.
 * This class is not intended to be sub-classed.
 */
public final class <%=factoryName%> {

	private static ToolkitInfo m_toolkitInformation = 
		<%if (toolkitInfoName != null) {%>new <%=toolkitInfoName%>();
		<%} else {%>null;<%}%>

	private <%=factoryName%>() {
		super();
	}
	
	public static ToolkitInfo getToolkitInformation() {
		return m_toolkitInformation;
	}

<%for (CompInfoForFactoryGen compInfo : compInfoList) {
	String componentName = compInfo.getComponentName();
	String implClassName = compInfo.getClassName();
	String returnType = compInfo.getMostSpecificVisibleSuperTypeName();
	Boolean hasDefaultMapping = compInfo.hasDefaultMapping();%>
	<%if (hasDefaultMapping) {%>
	public static <%=returnType%> create<%=componentName%> () {
		return new <%=implClassName%>();
	}<%} else {%>
	public static <%=returnType%> create<%=componentName%> (ComponentIdentifier componentIdentifier) {
		return new <%=implClassName%>(componentIdentifier);
	}<%}%>
<%}%>
}
<%}%>