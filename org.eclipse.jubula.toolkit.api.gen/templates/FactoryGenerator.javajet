<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
			org.eclipse.jubula.toolkit.api.gen.internal.FactoryGenInfo
			org.eclipse.jubula.toolkit.api.gen.internal.GenerationInfo" 
class="FactoryGenerator"%>
<%
GenerationInfo genInfo = (GenerationInfo)argument;
String factoryName = genInfo.getClassName();
String packageName = genInfo.getClassPackageName();
Object specInfo = genInfo.getSpecificInformation();
if (specInfo instanceof List) {
	List<FactoryGenInfo> factoryInfoList = (List<FactoryGenInfo>) specInfo;
%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import org.eclipse.jubula.tools.ComponentIdentifier;

/**
 * Generated factory for creating components from the <%=genInfo.getToolkitName()%> toolkit.
 * This class is not intended to be sub-classed.
 */
public final class <%=factoryName%> {

	private <%=factoryName%>() {
		super();
	}

<%for (FactoryGenInfo factoryInfo : factoryInfoList) {
	String componentName = factoryInfo.getComponentName();
	String implClassName = factoryInfo.getClassName();
	String returnType = factoryInfo.getMostSpecificVisibleSuperTypeName();
	Boolean hasDefaultMapping = factoryInfo.hasDefaultMapping();%>
	<%if (hasDefaultMapping) {%>
	public static <%=returnType%> create<%=componentName%> () {
		return new <%=implClassName%>();
	}<%} else {%>
	public static <%=returnType%> create<%=componentName%> (ComponentIdentifier componentIdentifier) {
		return new <%=implClassName%>(componentIdentifier);
	}<%}%>
<%}%>
}
<%}%>