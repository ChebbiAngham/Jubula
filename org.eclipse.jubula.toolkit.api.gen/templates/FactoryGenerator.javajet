<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
         org.eclipse.jubula.toolkit.api.gen.internal.utils.GenerateUtil
         org.eclipse.jubula.toolkit.api.gen.internal.genmodel.FactoryGenInfo
         org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CompInfoForFactoryGen
         org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CommonGenInfo
         org.eclipse.jubula.tools.internal.xml.businessmodell.ComponentClass" 
class="FactoryGenerator"%>
<%
CommonGenInfo genInfo = (CommonGenInfo)argument;
String factoryName = genInfo.getClassName();
String packageName = genInfo.getClassPackageName();
Object specInfo = genInfo.getSpecificInformation();
String fqnGeneratorClassName = this.getClass().getName();
if (specInfo instanceof FactoryGenInfo) {
    FactoryGenInfo factoryInfo = (FactoryGenInfo) specInfo;
    List<CompInfoForFactoryGen> compInfoList = factoryInfo.getCompInformation();
    String toolkitInfoName = factoryInfo.getToolkitInfoName();
    String toolkitInfoFqName = factoryInfo.getToolkitInfoFqName();
%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import javax.annotation.Generated;

import org.apache.commons.lang.Validate;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jubula.tools.ComponentIdentifier;
import org.eclipse.jubula.toolkit.annotations.Beta;
import org.eclipse.jubula.toolkit.ToolkitInfo;

<%if (toolkitInfoFqName != null) {%>import <%=toolkitInfoFqName%>;<%}%>

/**
 * Factory for creating components from the <%=genInfo.getToolkitPackageName()%> toolkit.
 * @noextend This class is not intended to be extended by clients.
 */
@Generated(value = "<%=fqnGeneratorClassName%>", 
           date =  "<%=GenerateUtil.getISO8601Timestamp()%>")
public class <%=factoryName%> {
    
    <%if (toolkitInfoName != null) {%>
    @NonNull private final static ToolkitInfo TOOLKIT_INFORMATION = <%=toolkitInfoName%>Toolkit.createToolkitInformation();<%}%>

    private <%=factoryName%>() {
        super();
    }
    
    <%if (toolkitInfoName != null) {%>
    /** 
     *  @return the toolkit information, not recommended to be modified
     */
    @NonNull public static ToolkitInfo getToolkitInformation() {
        return TOOLKIT_INFORMATION;
    }<%}%>

<%for (CompInfoForFactoryGen compInfo : compInfoList) {
    String componentName = compInfo.getClassName();
    String componentPackageName = compInfo.getPackageName();
    String fqClassName = componentPackageName + "." + componentName;
    String fqClassNameActionHandler = componentPackageName + ".handler." + componentName + "ActionHandler";
    ComponentClass componentClass = compInfo.getComponentClass();
    String componentClassName = "";
    boolean hasComponentClass = false;
    if (componentClass != null && !componentClass.getName().isEmpty()) {
        componentClassName = componentClass.getName();
        hasComponentClass = true;
    }
    String returnType = compInfo.getMostSpecificVisibleSuperTypeName();
    String returnTypeActionHandler = returnType.replaceAll("^(.*\\.)*(.*?)$","$1handler.$2ActionHandler");
    Boolean hasDefaultMapping = compInfo.hasDefaultMapping();
    
    String sinceC = "";
    String sinceCVersion = compInfo.getSince();
    if (sinceCVersion != null) {
        sinceC = "@since " + sinceCVersion;
    }%>
    <%if (hasDefaultMapping) {%>
    /** create a new representative for a {@link <%=componentName%>} component.
     * <%=sinceC%>
     */
    @NonNull public static <%=returnType%> create<%=componentName%> () {
        return new <%=fqClassName%>();
    }<%} else {%>
    /** create a new representative for a <%if (hasComponentClass) {%>{@link <%=componentClassName%>}<%} else {%><%=componentName%><%}%> UI component.
     * <%=sinceC%>
     */
    @NonNull public static <%=returnType%> create<%=componentName%> (@NonNull ComponentIdentifier<? extends <%=returnType%>> componentIdentifier) {
        Validate.notNull(componentIdentifier);
        return new <%=fqClassName%>(componentIdentifier);
    }<%}%>
    
    <%if (hasDefaultMapping) {%>
    /** create a new instance of <%=componentName%>ActionHandler 
     * @since 4.0
     */
    @Beta
    @NonNull public static <%=returnTypeActionHandler%> create<%=componentName%>ActionHandler () {
        return new <%=fqClassNameActionHandler%>();
    }<%} else {%>
    /** create a new representative for a <%if (hasComponentClass) {%>{@link <%=componentClassName%>}<%} else {%><%=componentName%><%}%> UI component.
     * @since 4.0
     */
    @Beta
    @NonNull public static <%=returnTypeActionHandler%> create<%=componentName%>ActionHandler (@NonNull ComponentIdentifier<? extends <%=returnType%>> componentIdentifier) {
        Validate.notNull(componentIdentifier);
        return new <%=fqClassNameActionHandler%>(componentIdentifier);
    }<%}%>
<%}%>
}
<%}%>