<%@ jet 
package="org.eclipse.jubula.toolkit.api.gen" 
imports="java.util.*
            org.eclipse.jubula.toolkit.api.gen.internal.genmodel.FactoryGenInfo
            org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CompInfoForFactoryGen
            org.eclipse.jubula.toolkit.api.gen.internal.genmodel.CommonGenInfo
           org.eclipse.jubula.tools.internal.xml.businessmodell.ComponentClass" 
class="FactoryGenerator"%>
<%
CommonGenInfo genInfo = (CommonGenInfo)argument;
String factoryName = genInfo.getClassName();
String packageName = genInfo.getClassPackageName();
Object specInfo = genInfo.getSpecificInformation();
if (specInfo instanceof FactoryGenInfo) {
    FactoryGenInfo factoryInfo = (FactoryGenInfo) specInfo;
    List<CompInfoForFactoryGen> compInfoList = factoryInfo.getCompInformation();
    String toolkitInfoName = factoryInfo.getToolkitInfoName();
    String toolkitInfoFqName = factoryInfo.getToolkitInfoFqName();
%>
/*******************************************************************************
 * Copyright (c) 2014 BREDEX GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BREDEX GmbH - initial API and implementation and/or initial documentation
 *******************************************************************************/
package <%=packageName%>;

import org.apache.commons.lang.Validate;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jubula.tools.ComponentIdentifier;
import org.eclipse.jubula.toolkit.ToolkitInfo;

<%if (toolkitInfoFqName != null) {%>import <%=toolkitInfoFqName%>;<%}%>

/**
 * Factory for creating components from the <%=genInfo.getToolkitName()%> toolkit.
 * @noextend This class is not intended to be extended by clients.
 */
public final class <%=factoryName%> {
    
    <%if (toolkitInfoName != null) {%>
    @NonNull private final static ToolkitInfo m_toolkitInformation = new <%=toolkitInfoName%>();<%}%>

    private <%=factoryName%>() {
        super();
    }
    
    <%if (toolkitInfoName != null) {%>
    @NonNull public static ToolkitInfo getToolkitInformation() {
        return m_toolkitInformation;
    }<%}%>

<%for (CompInfoForFactoryGen compInfo : compInfoList) {
    String componentName = compInfo.getComponentName();
    String implClassName = compInfo.getClassName();
    ComponentClass componentClass = compInfo.getComponentClass();
    String componentClassName = "";
    boolean hasComponentClass = false;
    if (componentClass != null && !componentClass.getName().isEmpty()) {
        componentClassName = componentClass.getName();
        hasComponentClass = true;
    }
    String returnType = compInfo.getMostSpecificVisibleSuperTypeName();
    Boolean hasDefaultMapping = compInfo.hasDefaultMapping();%>
    <%if (hasDefaultMapping) {%>
    /** create a new representative for a {@link <%=componentName%>} component.*/
    @NonNull public static <%=returnType%> create<%=componentName%> () {
        return new <%=implClassName%>();
    }<%} else {%>
    /** create a new representative for a <%if (hasComponentClass) {%>{@link <%=componentClassName%>}<%} else {%><%=componentName%><%}%> UI component.*/
    @NonNull public static <%=returnType%> create<%=componentName%> (@NonNull ComponentIdentifier componentIdentifier) {
        Validate.notNull(componentIdentifier);
        return new <%=implClassName%>(componentIdentifier);
    }<%}%>
<%}%>
}
<%}%>